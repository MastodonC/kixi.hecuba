;; Analyzed by ClojureScript 0.0-3297
{:use-macros {go cljs.core.async.macros}, :excludes #{}, :name geom-om.core, :imports nil, :requires {thi.ng.geom.core.utils thi.ng.geom.core.utils, thi.ng.geom.viz.core thi.ng.geom.viz.core, gstring goog.string, viz thi.ng.geom.viz.core, grad thi.ng.color.gradients, dom om.dom, hiccups.runtime hiccups.runtime, thi.ng.geom.core thi.ng.geom.core, goog.string goog.string, gu thi.ng.geom.core.utils, v thi.ng.geom.core.vector, cljs-http.client cljs-http.client, om.dom om.dom, thi.ng.math.simplexnoise thi.ng.math.simplexnoise, geom-om.heatmap geom-om.heatmap, heatmap geom-om.heatmap, thi.ng.geom.svg.core thi.ng.geom.svg.core, thi.ng.geom.core.vector thi.ng.geom.core.vector, thi.ng.math.core thi.ng.math.core, cljs.core.async cljs.core.async, thi.ng.color.gradients thi.ng.color.gradients, xy geom-om.xy, n thi.ng.math.simplexnoise, m thi.ng.math.core, goog.string.format goog.string.format, om.core om.core, om om.core, g thi.ng.geom.core, cljs.reader cljs.reader, svg thi.ng.geom.svg.core, hiccupsrt hiccups.runtime, http cljs-http.client, geom-om.xy geom-om.xy}, :uses {<! cljs.core.async, close! cljs.core.async, chan cljs.core.async, PI thi.ng.math.core, sliding-buffer cljs.core.async, >! cljs.core.async, read-string cljs.reader, alts! cljs.core.async, put! cljs.core.async}, :defs {xy-data-chan {:name geom-om.core/xy-data-chan, :file "src/geom_om/core.cljs", :line 23, :column 1, :end-line 23, :end-column 22, :meta {:file "/Users/jasonbell/work/git/geom-om/src/geom_om/core.cljs", :line 23, :column 10, :end-line 23, :end-column 22}}, heatmap-data-chan {:name geom-om.core/heatmap-data-chan, :file "src/geom_om/core.cljs", :line 24, :column 1, :end-line 24, :end-column 27, :meta {:file "/Users/jasonbell/work/git/geom-om/src/geom_om/core.cljs", :line 24, :column 10, :end-line 24, :end-column 27}}, app-state {:name geom-om.core/app-state, :file "src/geom_om/core.cljs", :line 25, :column 1, :end-line 25, :end-column 19, :meta {:file "/Users/jasonbell/work/git/geom-om/src/geom_om/core.cljs", :line 25, :column 10, :end-line 25, :end-column 19}}, update-chart-settings {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/src/geom_om/core.cljs", :line 58, :column 7, :end-line 58, :end-column 28, :arglists (quote ([owner cursor]))}, :name geom-om.core/update-chart-settings, :variadic false, :file "src/geom_om/core.cljs", :end-column 28, :method-params ([owner cursor]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 58, :end-line 58, :max-fixed-arity 2, :fn-var true, :arglists (quote ([owner cursor]))}, t30793 {:num-fields 3, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :name geom-om.core/t30793, :file "src/geom_om/core.cljs", :type true, :anonymous true, :column 4, :line 75, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t30793 {:protocol-inline nil, :meta {:anonymous true, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([cursor owner meta30794])), :file nil}, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :name geom-om.core/->t30793, :variadic false, :file "src/geom_om/core.cljs", :method-params ([cursor owner meta30794]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 4, :factory :positional, :line 75, :max-fixed-arity 3, :fn-var true, :arglists (quote ([cursor owner meta30794])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, on-js-reload {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/src/geom_om/core.cljs", :line 107, :column 7, :end-line 107, :end-column 19, :arglists (quote ([]))}, :name geom-om.core/on-js-reload, :variadic false, :file "src/geom_om/core.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 107, :end-line 107, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {hiccups hiccups.core, hiccups.core hiccups.core, cljs.core.async.macros cljs.core.async.macros, om om.core, om.core om.core, dom om.dom, om.dom om.dom}, :cljs.analyzer/constants {:seen #{:path :heatmap :else :xy :default :y-range :value :width :recur :data-chan :ucb :grads :target :body :x-range :heatmap-controls :fill-out-of-range-cells? :height :lcb :data}, :order [:xy :heatmap :heatmap-controls :data :lcb :ucb :grads :default :body :value :recur :else :width :height :data-chan :fill-out-of-range-cells? :target :path :x-range :y-range]}, :doc nil}