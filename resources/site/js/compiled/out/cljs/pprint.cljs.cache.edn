;; Analyzed by ClojureScript 0.0-3297
{:use-macros {deftype cljs.pprint, print-length-loop cljs.pprint, defdirectives cljs.pprint, getf cljs.pprint, pprint-logical-block cljs.pprint, formatter-out cljs.pprint, with-pretty-writer cljs.pprint, setf cljs.pprint}, :excludes #{pr deftype prn println print}, :name cljs.pprint, :imports {StringBuffer goog.string.StringBuffer}, :requires {cljs.core cljs.core, string clojure.string, clojure.string clojure.string, StringBuffer goog.string.StringBuffer}, :uses {IWriter cljs.core, IDeref cljs.core}, :defs {indent-t {:num-fields 6, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name cljs.pprint/indent-t, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 18, :type true, :column 10, :internal-ctor true, :line 260, :record true, :end-line 260, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, write-token-string {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 400, :column 8, :end-line 400, :end-column 26, :private true, :arglists (quote ([this tokens]))}, :private true, :name cljs.pprint/write-token-string, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 26, :method-params ([this tokens]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 400, :end-line 400, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this tokens]))}, process-nesting {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 2670, :column 8, :end-line 2670, :end-column 23, :private true, :arglists (quote ([format])), :doc "Take a linearly compiled format and process the bracket directives to give it\n   the appropriate tree structure"}, :private true, :name cljs.pprint/process-nesting, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 23, :method-params ([format]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2670, :end-line 2670, :max-fixed-arity 1, :fn-var true, :arglists (quote ([format])), :doc "Take a linearly compiled format and process the bracket directives to give it\n   the appropriate tree structure"}, init-cap-writer {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 2020, :column 8, :end-line 2020, :end-column 23, :private true, :arglists (quote ([writer])), :doc "Returns a proxy that wraps writer, capitalizing the first word"}, :private true, :name cljs.pprint/init-cap-writer, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 23, :method-params ([writer]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2020, :end-line 2020, :max-fixed-arity 1, :fn-var true, :arglists (quote ([writer])), :doc "Returns a proxy that wraps writer, capitalizing the first word"}, check-enumerated-arg {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 834, :column 8, :end-line 834, :end-column 28, :private true, :arglists (quote ([arg choices]))}, :private true, :name cljs.pprint/check-enumerated-arg, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 28, :method-params ([arg choices]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 834, :end-line 834, :max-fixed-arity 2, :fn-var true, :arglists (quote ([arg choices]))}, brackets {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 2936, :column 8, :end-line 2936, :end-column 16, :private true, :arglists (quote ([form])), :doc "Figure out which kind of brackets to use"}, :private true, :name cljs.pprint/brackets, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 16, :method-params ([form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2936, :end-line 2936, :max-fixed-arity 1, :fn-var true, :arglists (quote ([form])), :doc "Figure out which kind of brackets to use"}, get-section {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 359, :column 8, :end-line 359, :end-column 19, :private true, :arglists (quote ([buffer]))}, :private true, :name cljs.pprint/get-section, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 19, :method-params ([buffer]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 359, :end-line 359, :max-fixed-arity 1, :fn-var true, :arglists (quote ([buffer]))}, readable-character {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1360, :column 8, :end-line 1360, :end-column 26, :private true, :arglists (quote ([params navigator offsets]))}, :private true, :name cljs.pprint/readable-character, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 26, :method-params ([params navigator offsets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1360, :end-line 1360, :max-fixed-arity 3, :fn-var true, :arglists (quote ([params navigator offsets]))}, linear-nl? {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 325, :column 8, :end-line 325, :end-column 18, :private true, :arglists (quote ([this lb section]))}, :private true, :name cljs.pprint/linear-nl?, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 18, :method-params ([this lb section]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 325, :end-line 325, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this lb section]))}, base-str {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1088, :column 8, :end-line 1088, :end-column 16, :private true, :arglists (quote ([base val])), :doc "Return val as a string in the given base"}, :private true, :name cljs.pprint/base-str, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 16, :method-params ([base val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1088, :end-line 1088, :max-fixed-arity 2, :fn-var true, :arglists (quote ([base val])), :doc "Return val as a string in the given base"}, buffer-length {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 244, :column 8, :end-line 244, :end-column 21, :private true, :arglists (quote ([l]))}, :private true, :name cljs.pprint/buffer-length, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 21, :method-params ([l]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 244, :end-line 244, :max-fixed-arity 1, :fn-var true, :arglists (quote ([l]))}, integral? {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1066, :column 8, :end-line 1066, :end-column 17, :private true, :arglists (quote ([x])), :doc "returns true if a number is actually an integer (that is, has no fractional part)"}, :private true, :name cljs.pprint/integral?, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 17, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1066, :end-line 1066, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "returns true if a number is actually an integer (that is, has no fractional part)"}, *print-circle* {:meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 650, :column 1, :end-line 650, :end-column 15, :private true, :doc "Mark circular structures (N.B. This is not yet used)", :dynamic true}, :private true, :name cljs.pprint/*print-circle*, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 15, :column 1, :dynamic true, :line 647, :end-line 650, :doc "Mark circular structures (N.B. This is not yet used)"}, param-pattern {:name cljs.pprint/param-pattern, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :line 2459, :column 1, :end-line 2460, :end-column 19, :private true, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 2460, :column 6, :end-line 2460, :end-column 19, :private true}}, boolean-conditional {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1702, :column 8, :end-line 1702, :end-column 27, :private true, :arglists (quote ([params arg-navigator offsets]))}, :private true, :name cljs.pprint/boolean-conditional, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 27, :method-params ([params arg-navigator offsets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1702, :end-line 1702, :max-fixed-arity 3, :fn-var true, :arglists (quote ([params arg-navigator offsets]))}, add-english-scales {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1197, :column 8, :end-line 1197, :end-column 26, :private true, :arglists (quote ([parts offset])), :doc "Take a sequence of parts, add scale numbers (e.g., million) and combine into a string\n  offset is a factor of 10^3 to multiply by"}, :private true, :name cljs.pprint/add-english-scales, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 26, :method-params ([parts offset]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1197, :end-line 1197, :max-fixed-arity 2, :fn-var true, :arglists (quote ([parts offset])), :doc "Take a sequence of parts, add scale numbers (e.g., million) and combine into a string\n  offset is a factor of 10^3 to multiply by"}, pprint {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 812, :column 7, :end-line 812, :end-column 13, :arglists (quote ([object] [object writer])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([object] [object writer]), :arglists ([object] [object writer]), :arglists-meta (nil nil)}}, :name cljs.pprint/pprint, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([object] [object writer]), :arglists ([object] [object writer]), :arglists-meta (nil nil)}, :method-params ([object] [object writer]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 812, :end-line 812, :max-fixed-arity 2, :fn-var true, :arglists ([object] [object writer])}, iterate-main-sublists {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1803, :column 8, :end-line 1803, :end-column 29, :private true, :arglists (quote ([params navigator offsets]))}, :private true, :name cljs.pprint/iterate-main-sublists, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 29, :method-params ([params navigator offsets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1803, :end-line 1803, :max-fixed-arity 3, :fn-var true, :arglists (quote ([params navigator offsets]))}, simple-dispatch {:name cljs.pprint/simple-dispatch, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :line 2911, :column 1, :end-line 2911, :end-column 26, :doc "The pretty print dispatch function for simple data structure format.", :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 2911, :column 11, :end-line 2911, :end-column 26, :doc "The pretty print dispatch function for simple data structure format."}}, pr {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 44, :column 18, :end-line 44, :end-column 20, :dynamic true, :private true, :arglists (quote ([& more])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(more)], :arglists ([& more]), :arglists-meta (nil)}}, :private true, :name cljs.pprint/pr, :variadic true, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(more)], :arglists ([& more]), :arglists-meta (nil)}, :method-params [(more)], :protocol-impl nil, :arglists-meta (nil), :column 1, :dynamic true, :line 44, :end-line 44, :max-fixed-arity 0, :fn-var true, :arglists ([& more])}, needs-pretty {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 2705, :column 8, :end-line 2705, :end-column 20, :private true, :arglists (quote ([format])), :doc "determine whether a given compiled format has any directives that depend on the\ncolumn number or pretty printing"}, :private true, :name cljs.pprint/needs-pretty, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 20, :method-params ([format]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2705, :end-line 2705, :max-fixed-arity 1, :fn-var true, :arglists (quote ([format])), :doc "determine whether a given compiled format has any directives that depend on the\ncolumn number or pretty printing"}, get-column {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 160, :column 8, :end-line 160, :end-column 18, :private true, :arglists (quote ([this]))}, :private true, :name cljs.pprint/get-column, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 160, :end-line 160, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this]))}, pprint-let {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 3070, :column 8, :end-line 3070, :end-column 18, :private true, :arglists (quote ([alis]))}, :private true, :name cljs.pprint/pprint-let, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 18, :method-params ([alis]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3070, :end-line 3070, :max-fixed-arity 1, :fn-var true, :arglists (quote ([alis]))}, english-cardinal-tens {:name cljs.pprint/english-cardinal-tens, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :line 1158, :column 1, :end-line 1159, :end-column 27, :private true, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1159, :column 6, :end-line 1159, :end-column 27, :private true}}, special-chars {:name cljs.pprint/special-chars, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :line 1343, :column 1, :end-line 1344, :end-column 19, :private true, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1344, :column 6, :end-line 1344, :end-column 19, :private true}}, justify-clauses {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1862, :column 8, :end-line 1862, :end-column 23, :private true, :arglists (quote ([params navigator offsets]))}, :private true, :name cljs.pprint/justify-clauses, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 23, :method-params ([params navigator offsets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1862, :end-line 1862, :max-fixed-arity 3, :fn-var true, :arglists (quote ([params navigator offsets]))}, write-line {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 424, :column 8, :end-line 424, :end-column 18, :private true, :arglists (quote ([this]))}, :private true, :name cljs.pprint/write-line, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 424, :end-line 424, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this]))}, get-pretty-writer {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 2065, :column 7, :end-line 2065, :end-column 24, :arglists (quote ([writer])), :doc "Returns the IWriter passed in wrapped in a pretty writer proxy, unless it's\nalready a pretty writer. Generally, it is unnecessary to call this function, since pprint,\nwrite, and cl-format all call it if they need to. However if you want the state to be\npreserved across calls, you will want to wrap them with this.\n\nFor example, when you want to generate column-aware output with multiple calls to cl-format,\ndo it like in this example:\n\n    (defn print-table [aseq column-width]\n      (binding [*out* (get-pretty-writer *out*)]\n        (doseq [row aseq]\n          (doseq [col row]\n            (cl-format true \"~4D~7,vT\" col column-width))\n          (prn))))\n\nNow when you run:\n\n    user> (print-table (map #(vector % (* % %) (* % % %)) (range 1 11)) 8)\n\nIt prints a table of squares and cubes for the numbers from 1 to 10:\n\n       1      1       1\n       2      4       8\n       3      9      27\n       4     16      64\n       5     25     125\n       6     36     216\n       7     49     343\n       8     64     512\n       9     81     729\n      10    100    1000"}, :name cljs.pprint/get-pretty-writer, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 24, :method-params ([writer]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2065, :end-line 2065, :max-fixed-arity 1, :fn-var true, :arglists (quote ([writer])), :doc "Returns the IWriter passed in wrapped in a pretty writer proxy, unless it's\nalready a pretty writer. Generally, it is unnecessary to call this function, since pprint,\nwrite, and cl-format all call it if they need to. However if you want the state to be\npreserved across calls, you will want to wrap them with this.\n\nFor example, when you want to generate column-aware output with multiple calls to cl-format,\ndo it like in this example:\n\n    (defn print-table [aseq column-width]\n      (binding [*out* (get-pretty-writer *out*)]\n        (doseq [row aseq]\n          (doseq [col row]\n            (cl-format true \"~4D~7,vT\" col column-width))\n          (prn))))\n\nNow when you run:\n\n    user> (print-table (map #(vector % (* % %) (* % % %)) (range 1 11)) 8)\n\nIt prints a table of squares and cubes for the numbers from 1 to 10:\n\n       1      1       1\n       2      4       8\n       3      9      27\n       4     16      64\n       5     25     125\n       6     36     216\n       7     49     343\n       8     64     512\n       9     81     729\n      10    100    1000"}, *print-suppress-namespaces* {:meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 662, :column 1, :end-line 662, :end-column 28, :doc "Don't print namespaces with symbols. This is particularly useful when\npretty printing the results of macro expansions", :added "1.2", :dynamic true}, :added "1.2", :name cljs.pprint/*print-suppress-namespaces*, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 28, :column 1, :dynamic true, :line 658, :end-line 662, :doc "Don't print namespaces with symbols. This is particularly useful when\npretty printing the results of macro expansions"}, level-exceeded {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 839, :column 8, :end-line 839, :end-column 22, :private true, :arglists (quote ([]))}, :private true, :name cljs.pprint/level-exceeded, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 22, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 839, :end-line 839, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, logical-block {:private true, :num-fields 10, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name cljs.pprint/logical-block, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 42, :type true, :column 29, :internal-ctor true, :line 231, :record true, :end-line 231, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, make-nl-t {:protocol-inline nil, :meta {:private true, :arglists (quote ([type logical-block start-pos end-pos])), :file nil}, :private true, :name cljs.pprint/make-nl-t, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :method-params ([type logical-block start-pos end-pos]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 254, :max-fixed-arity 4, :fn-var true, :arglists (quote ([type logical-block start-pos end-pos]))}, map->nl-t {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 254, :column 10, :end-line 254, :end-column 14, :internal-ctor true, :factory :map, :arglists (quote ([G__43911]))}, :name cljs.pprint/map->nl-t, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 14, :method-params ([G__43911]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 254, :end-line 254, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__43911]))}, dollar-float {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1664, :column 8, :end-line 1664, :end-column 20, :private true, :arglists (quote ([params navigator offsets]))}, :private true, :name cljs.pprint/dollar-float, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 20, :method-params ([params navigator offsets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1664, :end-line 1664, :max-fixed-arity 3, :fn-var true, :arglists (quote ([params navigator offsets]))}, write-initial-lines {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 454, :column 8, :end-line 454, :end-column 27, :private true, :arglists (quote ([this s]))}, :private true, :name cljs.pprint/write-initial-lines, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 27, :method-params ([this s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 454, :end-line 454, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this s]))}, indent-t? {:protocol-inline nil, :meta {:private true, :arglists (quote ([x__43072__auto__])), :file nil}, :private true, :name cljs.pprint/indent-t?, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :method-params ([x__43072__auto__]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 260, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x__43072__auto__]))}, char-code {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 63, :column 7, :end-line 63, :end-column 16, :arglists (quote ([c])), :doc "Convert char to int"}, :name cljs.pprint/char-code, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 16, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 63, :end-line 63, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c])), :doc "Convert char to int"}, insert-scaled-decimal {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1507, :column 8, :end-line 1507, :end-column 29, :private true, :arglists (quote ([m k])), :doc "Insert the decimal point at the right spot in the number to match an exponent"}, :private true, :name cljs.pprint/insert-scaled-decimal, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 29, :method-params ([m k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1507, :end-line 1507, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m k])), :doc "Insert the decimal point at the right spot in the number to match an exponent"}, add-padding {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 3304, :column 8, :end-line 3304, :end-column 19, :private true, :arglists (quote ([width s]))}, :private true, :name cljs.pprint/add-padding, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 19, :method-params ([width s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3304, :end-line 3304, :max-fixed-arity 2, :fn-var true, :arglists (quote ([width s]))}, arg-navigator {:private true, :num-fields 3, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name cljs.pprint/arg-navigator, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 16, :type true, :column 3, :internal-ctor true, :line 945, :record true, :end-line 945, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, map->compiled-directive {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 989, :column 3, :end-line 989, :end-column 21, :private true, :internal-ctor true, :factory :map, :arglists (quote ([G__44092]))}, :private true, :name cljs.pprint/map->compiled-directive, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 21, :method-params ([G__44092]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 988, :end-line 989, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__44092]))}, *current-length* {:name cljs.pprint/*current-length*, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :line 685, :column 1, :end-line 685, :end-column 49, :private true, :dynamic true, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 685, :column 33, :end-line 685, :end-column 49, :private true, :dynamic true}}, round-str {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1440, :column 8, :end-line 1440, :end-column 17, :private true, :arglists (quote ([m e d w]))}, :private true, :name cljs.pprint/round-str, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 17, :method-params ([m e d w]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1440, :end-line 1440, :max-fixed-arity 4, :fn-var true, :arglists (quote ([m e d w]))}, *print-pretty* {:name cljs.pprint/*print-pretty*, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :line 616, :column 1, :end-line 618, :end-column 16, :doc "Bind to true if you want write to use pretty printing", :dynamic true, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 618, :column 2, :end-line 618, :end-column 16, :doc "Bind to true if you want write to use pretty printing", :dynamic true}}, *print-pprint-dispatch* {:meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 624, :column 2, :end-line 624, :end-column 25, :doc "The pretty print dispatch function. Use with-pprint-dispatch or\nset-pprint-dispatch to modify.", :added "1.2", :dynamic true}, :added "1.2", :name cljs.pprint/*print-pprint-dispatch*, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 25, :column 1, :dynamic true, :line 620, :end-line 624, :doc "The pretty print dispatch function. Use with-pprint-dispatch or\nset-pprint-dispatch to modify."}, write-option-table {:name cljs.pprint/write-option-table, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :line 693, :column 1, :end-line 693, :end-column 41, :private true, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 693, :column 23, :end-line 693, :end-column 41, :private true}}, pp-newline {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 262, :column 16, :end-line 262, :end-column 26, :private true}, :private true, :name cljs.pprint/pp-newline, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 26, :method-params ([]), :protocol-impl nil, :arglists-meta (), :column 1, :line 262, :end-line 262, :max-fixed-arity 0, :fn-var true, :arglists nil}, ->t44303 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([downcase-writer writer meta44304])), :file nil}, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.pprint/->t44303, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :method-params ([downcase-writer writer meta44304]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 1920, :max-fixed-arity 3, :fn-var true, :arglists (quote ([downcase-writer writer meta44304])), :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}}, upcase-writer {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1938, :column 8, :end-line 1938, :end-column 21, :private true, :arglists (quote ([writer])), :doc "Returns a proxy that wraps writer, converting all characters to upper case"}, :private true, :name cljs.pprint/upcase-writer, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 21, :method-params ([writer]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1938, :end-line 1938, :max-fixed-arity 1, :fn-var true, :arglists (quote ([writer])), :doc "Returns a proxy that wraps writer, converting all characters to upper case"}, start-block-t {:num-fields 4, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name cljs.pprint/start-block-t, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 23, :type true, :column 10, :internal-ctor true, :line 256, :record true, :end-line 256, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, execute-sub-format {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1380, :column 8, :end-line 1380, :end-column 26, :private true, :arglists (quote ([format args base-args]))}, :private true, :name cljs.pprint/execute-sub-format, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 26, :method-params ([format args base-args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1380, :end-line 1380, :max-fixed-arity 3, :fn-var true, :arglists (quote ([format args base-args]))}, end-block-t? {:protocol-inline nil, :meta {:private true, :arglists (quote ([x__43072__auto__])), :file nil}, :private true, :name cljs.pprint/end-block-t?, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :method-params ([x__43072__auto__]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 258, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x__43072__auto__]))}, nl-t {:num-fields 5, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name cljs.pprint/nl-t, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 14, :type true, :column 10, :internal-ctor true, :line 254, :record true, :end-line 254, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, conditional-newline {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 2165, :column 8, :end-line 2165, :end-column 27, :private true, :arglists (quote ([params navigator offsets]))}, :private true, :name cljs.pprint/conditional-newline, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 27, :method-params ([params navigator offsets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2165, :end-line 2165, :max-fixed-arity 3, :fn-var true, :arglists (quote ([params navigator offsets]))}, make-buffer-blob {:protocol-inline nil, :meta {:private true, :arglists (quote ([data trailing-white-space start-pos end-pos])), :file nil}, :private true, :name cljs.pprint/make-buffer-blob, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :method-params ([data trailing-white-space start-pos end-pos]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 251, :max-fixed-arity 4, :fn-var true, :arglists (quote ([data trailing-white-space start-pos end-pos]))}, pprint-newline {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 842, :column 7, :end-line 842, :end-column 21, :arglists (quote ([kind])), :doc "Print a conditional newline to a pretty printing stream. kind specifies if the\n  newline is :linear, :miser, :fill, or :mandatory.\n\n  This function is intended for use when writing custom dispatch functions.\n\n  Output is sent to *out* which must be a pretty printing writer."}, :name cljs.pprint/pprint-newline, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 21, :method-params ([kind]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 842, :end-line 842, :max-fixed-arity 1, :fn-var true, :arglists (quote ([kind])), :doc "Print a conditional newline to a pretty printing stream. kind specifies if the\n  newline is :linear, :miser, :fill, or :mandatory.\n\n  This function is intended for use when writing custom dispatch functions.\n\n  Output is sent to *out* which must be a pretty printing writer."}, float-parts-base {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1398, :column 8, :end-line 1398, :end-column 24, :private true, :arglists (quote ([f])), :doc "Produce string parts for the mantissa (normalize 1-9) and exponent"}, :private true, :name cljs.pprint/float-parts-base, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 24, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1398, :end-line 1398, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f])), :doc "Produce string parts for the mantissa (normalize 1-9) and exponent"}, rtrim {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 113, :column 8, :end-line 113, :end-column 13, :private true, :arglists (quote ([s c]))}, :private true, :name cljs.pprint/rtrim, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 13, :method-params ([s c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 113, :end-line 113, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s c]))}, collect-clauses {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 2621, :column 8, :end-line 2621, :end-column 23, :private true, :arglists (quote ([bracket-info offset remainder]))}, :private true, :name cljs.pprint/collect-clauses, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 23, :method-params ([bracket-info offset remainder]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2621, :end-line 2621, :max-fixed-arity 3, :fn-var true, :arglists (quote ([bracket-info offset remainder]))}, pprint-vector {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 2839, :column 8, :end-line 2839, :end-column 21, :private true, :arglists (quote ([avec]))}, :private true, :name cljs.pprint/pprint-vector, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 21, :method-params ([avec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2839, :end-line 2839, :max-fixed-arity 1, :fn-var true, :arglists (quote ([avec]))}, compile-raw-string {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 2575, :column 8, :end-line 2575, :end-column 26, :private true, :arglists (quote ([s offset]))}, :private true, :name cljs.pprint/compile-raw-string, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 26, :method-params ([s offset]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2575, :end-line 2575, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s offset]))}, code-dispatch {:meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 3210, :column 3, :end-line 3210, :end-column 16, :added "1.2", :arglists (quote [[object]]), :doc "The pretty print dispatch function for pretty printing Clojure code."}, :added "1.2", :name cljs.pprint/code-dispatch, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 16, :column 1, :line 3209, :end-line 3210, :arglists (quote [[object]]), :doc "The pretty print dispatch function for pretty printing Clojure code."}, end-block-t {:num-fields 4, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name cljs.pprint/end-block-t, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 21, :type true, :column 10, :internal-ctor true, :line 258, :record true, :end-line 258, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, emit-nl? {:name cljs.pprint/emit-nl?, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :line 336, :column 1, :end-line 336, :end-column 36, :private true, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 336, :column 28, :end-line 336, :end-column 36, :private true}}, get-max-column {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 166, :column 8, :end-line 166, :end-column 22, :private true, :arglists (quote ([this]))}, :private true, :name cljs.pprint/get-max-column, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 22, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 166, :end-line 166, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this]))}, set-max-column {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 169, :column 8, :end-line 169, :end-column 22, :private true, :arglists (quote ([this new-max]))}, :private true, :name cljs.pprint/set-max-column, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 22, :method-params ([this new-max]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 169, :end-line 169, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this new-max]))}, ->t44315 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([upcase-writer writer meta44316])), :file nil}, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.pprint/->t44315, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :method-params ([upcase-writer writer meta44316]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 1941, :max-fixed-arity 3, :fn-var true, :arglists (quote ([upcase-writer writer meta44316])), :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}}, cached-compile {:name cljs.pprint/cached-compile, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :line 2768, :column 1, :end-line 2768, :end-column 37, :private true, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 2768, :column 23, :end-line 2768, :end-column 37, :private true}}, c-write-char {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 177, :column 8, :end-line 177, :end-column 20, :private true, :arglists (quote ([this c]))}, :private true, :name cljs.pprint/c-write-char, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 20, :method-params ([this c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 177, :end-line 177, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this c]))}, pprint-array {:name cljs.pprint/pprint-array, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :line 2849, :column 1, :end-line 2849, :end-column 35, :private true, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 2849, :column 23, :end-line 2849, :end-column 35, :private true}}, general-float {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1641, :column 8, :end-line 1641, :end-column 21, :private true, :arglists (quote ([params navigator offsets]))}, :private true, :name cljs.pprint/general-float, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 21, :method-params ([params navigator offsets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1641, :end-line 1641, :max-fixed-arity 3, :fn-var true, :arglists (quote ([params navigator offsets]))}, ->t44339 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([init-cap-writer writer capped meta44340])), :file nil}, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.pprint/->t44339, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :method-params ([init-cap-writer writer capped meta44340]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 2024, :max-fixed-arity 4, :fn-var true, :arglists (quote ([init-cap-writer writer capped meta44340])), :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}}, write-buffered-output {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 440, :column 8, :end-line 440, :end-column 29, :private true, :arglists (quote ([this]))}, :private true, :name cljs.pprint/write-buffered-output, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 29, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 440, :end-line 440, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this]))}, is-letter? {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1960, :column 8, :end-line 1960, :end-column 18, :private true, :arglists (quote ([s]))}, :private true, :name cljs.pprint/is-letter?, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 18, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1960, :end-line 1960, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, realize-parameter-list {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1015, :column 8, :end-line 1015, :end-column 30, :private true, :arglists (quote ([parameter-map navigator]))}, :private true, :name cljs.pprint/realize-parameter-list, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 30, :method-params ([parameter-map navigator]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1015, :end-line 1015, :max-fixed-arity 2, :fn-var true, :arglists (quote ([parameter-map navigator]))}, process-clause {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 2597, :column 8, :end-line 2597, :end-column 22, :private true, :arglists (quote ([bracket-info offset remainder]))}, :private true, :name cljs.pprint/process-clause, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 22, :method-params ([bracket-info offset remainder]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2597, :end-line 2597, :max-fixed-arity 3, :fn-var true, :arglists (quote ([bracket-info offset remainder]))}, update-nl-state {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 374, :column 8, :end-line 374, :end-column 23, :private true, :arglists (quote ([lb]))}, :private true, :name cljs.pprint/update-nl-state, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 23, :method-params ([lb]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 374, :end-line 374, :max-fixed-arity 1, :fn-var true, :arglists (quote ([lb]))}, javascript-base-formats {:name cljs.pprint/javascript-base-formats, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :line 1103, :column 1, :end-line 1104, :end-column 26, :private true, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1104, :column 3, :end-line 1104, :end-column 26, :private true}}, t44021 {:num-fields 7, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IDeref cljs.pprint/IPrettyFlush cljs.core/IWithMeta}, :name cljs.pprint/t44021, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :type true, :anonymous true, :column 5, :line 510, :record false, :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}}, write-token {:name cljs.pprint/write-token, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :line 266, :column 1, :end-line 266, :end-column 39, :private true, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 266, :column 28, :end-line 266, :end-column 39, :private true}}, pprint-ns {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 2977, :column 8, :end-line 2977, :end-column 17, :private true, :arglists (quote ([alis])), :doc "The pretty print dispatch chunk for the ns macro"}, :private true, :name cljs.pprint/pprint-ns, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 17, :method-params ([alis]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2977, :end-line 2977, :max-fixed-arity 1, :fn-var true, :arglists (quote ([alis])), :doc "The pretty print dispatch chunk for the ns macro"}, float? {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 55, :column 16, :end-line 55, :end-column 22, :tag boolean, :arglists (quote ([n])), :doc "Returns true if n is an float."}, :name cljs.pprint/float?, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 22, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 55, :ret-tag boolean, :end-line 55, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([n])), :doc "Returns true if n is an float."}, iterate-list-of-sublists {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1756, :column 8, :end-line 1756, :end-column 32, :private true, :arglists (quote ([params navigator offsets]))}, :private true, :name cljs.pprint/iterate-list-of-sublists, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 32, :method-params ([params navigator offsets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1756, :end-line 1756, :max-fixed-arity 3, :fn-var true, :arglists (quote ([params navigator offsets]))}, logical-block-or-justify {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1837, :column 8, :end-line 1837, :end-column 32, :private true, :arglists (quote ([params navigator offsets]))}, :private true, :name cljs.pprint/logical-block-or-justify, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 32, :method-params ([params navigator offsets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1837, :end-line 1837, :max-fixed-arity 3, :fn-var true, :arglists (quote ([params navigator offsets]))}, opt-base-str {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1106, :column 8, :end-line 1106, :end-column 20, :private true, :arglists (quote ([base val])), :doc "Return val as a string in the given base. No cljs format, so no improved performance."}, :private true, :name cljs.pprint/opt-base-str, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 20, :method-params ([base val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1106, :end-line 1106, :max-fixed-arity 2, :fn-var true, :arglists (quote ([base val])), :doc "Return val as a string in the given base. No cljs format, so no improved performance."}, compiled-directive {:private true, :num-fields 4, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name cljs.pprint/compiled-directive, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 21, :type true, :column 3, :internal-ctor true, :line 989, :record true, :end-line 989, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, get-format-arg {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 968, :column 8, :end-line 968, :end-column 22, :private true, :arglists (quote ([navigator]))}, :private true, :name cljs.pprint/get-format-arg, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 22, :method-params ([navigator]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 968, :end-line 968, :max-fixed-arity 1, :fn-var true, :arglists (quote ([navigator]))}, split-at-newline {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 394, :column 8, :end-line 394, :end-column 24, :private true, :arglists (quote ([tokens]))}, :private true, :name cljs.pprint/split-at-newline, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 24, :method-params ([tokens]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 394, :end-line 394, :max-fixed-arity 1, :fn-var true, :arglists (quote ([tokens]))}, special-params {:name cljs.pprint/special-params, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :line 2462, :column 1, :end-line 2463, :end-column 20, :private true, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 2463, :column 6, :end-line 2463, :end-column 20, :private true}}, *symbol-map* {:name cljs.pprint/*symbol-map*, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :line 3126, :column 1, :end-line 3126, :end-column 45, :private true, :dynamic true, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 3126, :column 33, :end-line 3126, :end-column 45, :private true, :dynamic true}}, t44339 {:num-fields 4, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.pprint/t44339, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :type true, :anonymous true, :column 5, :line 2024, :record false, :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}}, pprint-ns-reference {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 2943, :column 8, :end-line 2943, :end-column 27, :private true, :arglists (quote ([reference])), :doc "Pretty print a single reference (import, use, etc.) from a namespace decl"}, :private true, :name cljs.pprint/pprint-ns-reference, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 27, :method-params ([reference]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2943, :end-line 2943, :max-fixed-arity 1, :fn-var true, :arglists (quote ([reference])), :doc "Pretty print a single reference (import, use, etc.) from a namespace decl"}, else-separator? {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 2582, :column 8, :end-line 2582, :end-column 23, :private true, :arglists (quote ([this]))}, :private true, :name cljs.pprint/else-separator?, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 23, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2582, :end-line 2582, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this]))}, get-miser-width {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 604, :column 8, :end-line 604, :end-column 23, :private true, :arglists (quote ([this]))}, :private true, :name cljs.pprint/get-miser-width, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 23, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 604, :end-line 604, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this]))}, group-by* {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1111, :column 8, :end-line 1111, :end-column 17, :private true, :arglists (quote ([unit lis]))}, :private true, :name cljs.pprint/group-by*, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 17, :method-params ([unit lis]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1111, :end-line 1111, :max-fixed-arity 2, :fn-var true, :arglists (quote ([unit lis]))}, ->t44021 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IDeref cljs.pprint/IPrettyFlush cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([pretty-writer writer max-columns miser-width lb fields meta44022])), :file nil}, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IDeref cljs.pprint/IPrettyFlush cljs.core/IWithMeta}, :name cljs.pprint/->t44021, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :method-params ([pretty-writer writer max-columns miser-width lb fields meta44022]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 510, :max-fixed-arity 7, :fn-var true, :arglists (quote ([pretty-writer writer max-columns miser-width lb fields meta44022])), :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}}, init-navigator {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 947, :column 8, :end-line 947, :end-column 22, :private true, :arglists (quote ([s])), :doc "Create a new arg-navigator from the sequence with the position set to 0", :skip-wiki true}, :private true, :name cljs.pprint/init-navigator, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 22, :method-params ([s]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 947, :end-line 947, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Create a new arg-navigator from the sequence with the position set to 0"}, write-white-space {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 447, :column 8, :end-line 447, :end-column 25, :private true, :arglists (quote ([this]))}, :private true, :name cljs.pprint/write-white-space, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 25, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 447, :end-line 447, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this]))}, *print-shared* {:meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 656, :column 1, :end-line 656, :end-column 15, :private true, :doc "Mark repeated structures rather than repeat them (N.B. This is not yet used)", :dynamic true}, :private true, :name cljs.pprint/*print-shared*, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 15, :column 1, :dynamic true, :line 653, :end-line 656, :doc "Mark repeated structures rather than repeat them (N.B. This is not yet used)"}, *code-table* {:name cljs.pprint/*code-table*, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :line 3179, :column 1, :end-line 3179, :end-column 45, :private true, :dynamic true, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 3179, :column 33, :end-line 3179, :end-column 45, :private true, :dynamic true}}, insert-decimal {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1496, :column 8, :end-line 1496, :end-column 22, :private true, :arglists (quote ([m e])), :doc "Insert the decimal point at the right spot in the number to match an exponent"}, :private true, :name cljs.pprint/insert-decimal, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 22, :method-params ([m e]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1496, :end-line 1496, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m e])), :doc "Insert the decimal point at the right spot in the number to match an exponent"}, indent {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 592, :column 8, :end-line 592, :end-column 14, :private true, :arglists (quote ([this relative-to offset]))}, :private true, :name cljs.pprint/indent, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 14, :method-params ([this relative-to offset]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 592, :end-line 592, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this relative-to offset]))}, ltrim {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 124, :column 8, :end-line 124, :end-column 13, :private true, :arglists (quote ([s c]))}, :private true, :name cljs.pprint/ltrim, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 13, :method-params ([s c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 124, :end-line 124, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s c]))}, multi-defn {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 3024, :column 8, :end-line 3024, :end-column 18, :private true, :arglists (quote ([alis has-doc-str?]))}, :private true, :name cljs.pprint/multi-defn, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 18, :method-params ([alis has-doc-str?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3024, :end-line 3024, :max-fixed-arity 2, :fn-var true, :arglists (quote ([alis has-doc-str?]))}, pprint-binding-form {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 3055, :column 8, :end-line 3055, :end-column 27, :private true, :arglists (quote ([binding-vec]))}, :private true, :name cljs.pprint/pprint-binding-form, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 27, :method-params ([binding-vec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3055, :end-line 3055, :max-fixed-arity 1, :fn-var true, :arglists (quote ([binding-vec]))}, pprint-code-symbol {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 3202, :column 8, :end-line 3202, :end-column 26, :private true, :arglists (quote ([sym]))}, :private true, :name cljs.pprint/pprint-code-symbol, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 26, :method-params ([sym]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3202, :end-line 3202, :max-fixed-arity 1, :fn-var true, :arglists (quote ([sym]))}, realize-parameter {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 999, :column 8, :end-line 999, :end-column 25, :private true, :arglists (quote ([[param [raw-val offset]] navigator]))}, :private true, :name cljs.pprint/realize-parameter, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 25, :method-params ([p__44098 navigator]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 999, :end-line 999, :max-fixed-arity 2, :fn-var true, :arglists (quote ([[param [raw-val offset]] navigator]))}, ->arg-navigator {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 945, :column 3, :end-line 945, :end-column 16, :private true, :internal-ctor true, :factory :positional, :arglists (quote ([seq rest pos]))}, :private true, :name cljs.pprint/->arg-navigator, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 16, :method-params ([seq rest pos]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 944, :end-line 945, :max-fixed-arity 3, :fn-var true, :arglists (quote ([seq rest pos]))}, next-arg {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 955, :column 8, :end-line 955, :end-column 16, :private true, :arglists (quote ([navigator]))}, :private true, :name cljs.pprint/next-arg, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 16, :method-params ([navigator]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 955, :end-line 955, :max-fixed-arity 1, :fn-var true, :arglists (quote ([navigator]))}, column-writer {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 185, :column 8, :end-line 185, :end-column 21, :private true, :arglists (quote ([writer] [writer max-columns])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([writer] [writer max-columns]), :arglists ([writer] [writer max-columns]), :arglists-meta (nil nil)}}, :private true, :name cljs.pprint/column-writer, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 21, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([writer] [writer max-columns]), :arglists ([writer] [writer max-columns]), :arglists-meta (nil nil)}, :method-params ([writer] [writer max-columns]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 185, :end-line 185, :max-fixed-arity 2, :fn-var true, :arglists ([writer] [writer max-columns])}, check-flags {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 2512, :column 8, :end-line 2512, :end-column 19, :private true, :arglists (quote ([def flags]))}, :private true, :name cljs.pprint/check-flags, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 19, :method-params ([def flags]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2512, :end-line 2512, :max-fixed-arity 2, :fn-var true, :arglists (quote ([def flags]))}, get-sub-section {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 366, :column 8, :end-line 366, :end-column 23, :private true, :arglists (quote ([buffer]))}, :private true, :name cljs.pprint/get-sub-section, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 23, :method-params ([buffer]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 366, :end-line 366, :max-fixed-arity 1, :fn-var true, :arglists (quote ([buffer]))}, t44333 {:num-fields 4, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.pprint/t44333, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :type true, :anonymous true, :column 5, :line 2024, :record false, :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}}, pretty-writer {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 495, :column 8, :end-line 495, :end-column 21, :private true, :arglists (quote ([writer max-columns miser-width]))}, :private true, :name cljs.pprint/pretty-writer, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 21, :method-params ([writer max-columns miser-width]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 495, :end-line 495, :max-fixed-arity 3, :fn-var true, :arglists (quote ([writer max-columns miser-width]))}, type-dispatcher {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 2899, :column 8, :end-line 2899, :end-column 23, :private true, :arglists (quote ([obj]))}, :private true, :name cljs.pprint/type-dispatcher, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 23, :method-params ([obj]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2899, :end-line 2899, :max-fixed-arity 1, :fn-var true, :arglists (quote ([obj]))}, execute-format {:protocol-inline nil, :meta {:private true, :file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 22, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([stream format args] [format args]), :arglists ([stream format args] [format args]), :arglists-meta (nil nil)}, :skip-wiki true, :column 8, :line 2730, :end-line 2730, :arglists (quote ([stream format args] [format args])), :doc "Executes the format with the arguments."}, :private true, :name cljs.pprint/execute-format, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 22, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([stream format args] [format args]), :arglists ([stream format args] [format args]), :arglists-meta (nil nil)}, :method-params ([stream format args] [format args]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 2730, :end-line 2730, :max-fixed-arity 3, :fn-var true, :arglists ([stream format args] [format args]), :doc "Executes the format with the arguments."}, special-radix-markers {:name cljs.pprint/special-radix-markers, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :line 1030, :column 1, :end-line 1031, :end-column 24, :private true, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1031, :column 3, :end-line 1031, :end-column 24, :private true}}, inc-s {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1424, :column 8, :end-line 1424, :end-column 13, :private true, :arglists (quote ([s])), :doc "Assumption: The input string consists of one or more decimal digits,\n  and no other characters. Return a string containing one or more\n  decimal digits containing a decimal number one larger than the input\n  string. The output string will always be the same length as the input\n  string, or one character longer."}, :private true, :name cljs.pprint/inc-s, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 13, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1424, :end-line 1424, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Assumption: The input string consists of one or more decimal digits,\n  and no other characters. Return a string containing one or more\n  decimal digits containing a decimal number one larger than the input\n  string. The output string will always be the same length as the input\n  string, or one character longer."}, english-scale-numbers {:name cljs.pprint/english-scale-numbers, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :line 1171, :column 1, :end-line 1172, :end-column 27, :private true, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1172, :column 6, :end-line 1172, :end-column 27, :private true}}, pprint-tab {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 867, :column 7, :end-line 867, :end-column 17, :arglists (quote ([kind colnum colinc])), :doc "Tab at this point in the pretty printing stream. kind specifies whether the tab\nis :line, :section, :line-relative, or :section-relative.\n\nColnum and colinc specify the target column and the increment to move the target\nforward if the output is already past the original target.\n\nThis function is intended for use when writing custom dispatch functions.\n\nOutput is sent to *out* which must be a pretty printing writer.\n\nTHIS FUNCTION IS NOT YET IMPLEMENTED.", :added "1.2"}, :added "1.2", :name cljs.pprint/pprint-tab, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 17, :method-params ([kind colnum colinc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 867, :end-line 867, :max-fixed-arity 3, :fn-var true, :arglists (quote ([kind colnum colinc])), :doc "Tab at this point in the pretty printing stream. kind specifies whether the tab\nis :line, :section, :line-relative, or :section-relative.\n\nColnum and colinc specify the target column and the increment to move the target\nforward if the output is already past the original target.\n\nThis function is intended for use when writing custom dispatch functions.\n\nOutput is sent to *out* which must be a pretty printing writer.\n\nTHIS FUNCTION IS NOT YET IMPLEMENTED."}, unzip-map {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 102, :column 8, :end-line 102, :end-column 17, :private true, :arglists (quote ([m]))}, :private true, :name cljs.pprint/unzip-map, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 17, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 102, :end-line 102, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m]))}, format-integer {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1116, :column 8, :end-line 1116, :end-column 22, :private true, :arglists (quote ([base params arg-navigator offsets]))}, :private true, :name cljs.pprint/format-integer, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 22, :method-params ([base params arg-navigator offsets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1116, :end-line 1116, :max-fixed-arity 4, :fn-var true, :arglists (quote ([base params arg-navigator offsets]))}, next-arg-or-nil {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 961, :column 8, :end-line 961, :end-column 23, :private true, :arglists (quote ([navigator]))}, :private true, :name cljs.pprint/next-arg-or-nil, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 23, :method-params ([navigator]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 961, :end-line 961, :max-fixed-arity 1, :fn-var true, :arglists (quote ([navigator]))}, map->logical-block {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 231, :column 29, :end-line 231, :end-column 42, :private true, :internal-ctor true, :factory :map, :arglists (quote ([G__43894]))}, :private true, :name cljs.pprint/map->logical-block, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 42, :method-params ([G__43894]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 231, :end-line 231, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__43894]))}, pprint-cond {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 3086, :column 8, :end-line 3086, :end-column 19, :private true, :arglists (quote ([alis]))}, :private true, :name cljs.pprint/pprint-cond, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 19, :method-params ([alis]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3086, :end-line 3086, :max-fixed-arity 1, :fn-var true, :arglists (quote ([alis]))}, iterate-main-list {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1779, :column 8, :end-line 1779, :end-column 25, :private true, :arglists (quote ([params navigator offsets]))}, :private true, :name cljs.pprint/iterate-main-list, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 25, :method-params ([params navigator offsets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1779, :end-line 1779, :max-fixed-arity 3, :fn-var true, :arglists (quote ([params navigator offsets]))}, pprint-list {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 2834, :column 8, :end-line 2834, :end-column 19, :private true, :arglists (quote ([alis]))}, :private true, :name cljs.pprint/pprint-list, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 19, :method-params ([alis]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2834, :end-line 2834, :max-fixed-arity 1, :fn-var true, :arglists (quote ([alis]))}, pprint-hold-first {:name cljs.pprint/pprint-hold-first, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :line 3008, :column 1, :end-line 3008, :end-column 40, :private true, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 3008, :column 23, :end-line 3008, :end-column 40, :private true}}, fixed-float {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1520, :column 8, :end-line 1520, :end-column 19, :private true, :arglists (quote ([params navigator offsets]))}, :private true, :name cljs.pprint/fixed-float, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 19, :method-params ([params navigator offsets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1520, :end-line 1520, :max-fixed-arity 3, :fn-var true, :arglists (quote ([params navigator offsets]))}, map-passing-context {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 75, :column 8, :end-line 75, :end-column 27, :private true, :arglists (quote ([func initial-context lis]))}, :private true, :name cljs.pprint/map-passing-context, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 27, :method-params ([func initial-context lis]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 75, :end-line 75, :max-fixed-arity 3, :fn-var true, :arglists (quote ([func initial-context lis]))}, prn {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 47, :column 8, :end-line 47, :end-column 11, :private true, :arglists (quote ([& more])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(more)], :arglists ([& more]), :arglists-meta (nil)}}, :private true, :name cljs.pprint/prn, :variadic true, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(more)], :arglists ([& more]), :arglists-meta (nil)}, :method-params [(more)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 0, :fn-var true, :arglists ([& more])}, write-tokens {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 302, :column 8, :end-line 302, :end-column 20, :private true, :arglists (quote ([this tokens force-trailing-whitespace]))}, :private true, :name cljs.pprint/write-tokens, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 20, :method-params ([this tokens force-trailing-whitespace]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 302, :end-line 302, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this tokens force-trailing-whitespace]))}, pprint-ideref {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 2886, :column 8, :end-line 2886, :end-column 21, :private true, :arglists (quote ([o]))}, :private true, :name cljs.pprint/pprint-ideref, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 21, :method-params ([o]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2886, :end-line 2886, :max-fixed-arity 1, :fn-var true, :arglists (quote ([o]))}, t44303 {:num-fields 3, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.pprint/t44303, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :type true, :anonymous true, :column 3, :line 1920, :record false, :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}}, format-simple-ordinal {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1237, :column 8, :end-line 1237, :end-column 29, :private true, :arglists (quote ([num])), :doc "Convert a number less than 1000 to a ordinal english string\n  Note this should only be used for the last one in the sequence"}, :private true, :name cljs.pprint/format-simple-ordinal, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 29, :method-params ([num]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1237, :end-line 1237, :max-fixed-arity 1, :fn-var true, :arglists (quote ([num])), :doc "Convert a number less than 1000 to a ordinal english string\n  Note this should only be used for the last one in the sequence"}, end-block {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 572, :column 8, :end-line 572, :end-column 17, :private true, :arglists (quote ([this]))}, :private true, :name cljs.pprint/end-block, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 572, :end-line 572, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this]))}, start-block-t? {:protocol-inline nil, :meta {:private true, :arglists (quote ([x__43072__auto__])), :file nil}, :private true, :name cljs.pprint/start-block-t?, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :method-params ([x__43072__auto__]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 256, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x__43072__auto__]))}, t44315 {:num-fields 3, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.pprint/t44315, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :type true, :anonymous true, :column 3, :line 1941, :record false, :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}}, ->t44327 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([capitalize-word-writer writer last-was-whitespace? meta44328])), :file nil}, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.pprint/->t44327, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :method-params ([capitalize-word-writer writer last-was-whitespace? meta44328]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 1998, :max-fixed-arity 4, :fn-var true, :arglists (quote ([capitalize-word-writer writer last-was-whitespace? meta44328])), :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}}, pprint-set {:name cljs.pprint/pprint-set, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :line 2873, :column 1, :end-line 2873, :end-column 16, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 2873, :column 6, :end-line 2873, :end-column 16}}, ->start-block-t {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 256, :column 10, :end-line 256, :end-column 23, :internal-ctor true, :factory :positional, :arglists (quote ([type-tag logical-block start-pos end-pos]))}, :name cljs.pprint/->start-block-t, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 23, :method-params ([type-tag logical-block start-pos end-pos]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 256, :end-line 256, :max-fixed-arity 4, :fn-var true, :arglists (quote ([type-tag logical-block start-pos end-pos]))}, print-table {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 3308, :column 7, :end-line 3308, :end-column 18, :arglists (quote ([ks rows] [rows])), :doc "Prints a collection of maps in a textual table. Prints table headings\n   ks, and then a line of output for each row, corresponding to the keys\n   in ks. If ks are not specified, use the keys of the first item in rows.", :added "1.3", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([ks rows] [rows]), :arglists ([ks rows] [rows]), :arglists-meta (nil nil)}}, :added "1.3", :name cljs.pprint/print-table, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([ks rows] [rows]), :arglists ([ks rows] [rows]), :arglists-meta (nil nil)}, :method-params ([ks rows] [rows]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3308, :end-line 3308, :max-fixed-arity 2, :fn-var true, :arglists ([ks rows] [rows]), :doc "Prints a collection of maps in a textual table. Prints table headings\n   ks, and then a line of output for each row, corresponding to the keys\n   in ks. If ks are not specified, use the keys of the first item in rows."}, relative-reposition {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 982, :column 8, :end-line 982, :end-column 27, :private true, :arglists (quote ([navigator position]))}, :private true, :name cljs.pprint/relative-reposition, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 27, :method-params ([navigator position]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 982, :end-line 982, :max-fixed-arity 2, :fn-var true, :arglists (quote ([navigator position]))}, pprint-anon-func {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 3128, :column 8, :end-line 3128, :end-column 24, :private true, :arglists (quote ([alis]))}, :private true, :name cljs.pprint/pprint-anon-func, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 24, :method-params ([alis]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3128, :end-line 3128, :max-fixed-arity 1, :fn-var true, :arglists (quote ([alis]))}, ->t44027 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IDeref cljs.pprint/IPrettyFlush cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([pretty-writer writer max-columns miser-width lb fields meta44028])), :file nil}, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IDeref cljs.pprint/IPrettyFlush cljs.core/IWithMeta}, :name cljs.pprint/->t44027, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :method-params ([pretty-writer writer max-columns miser-width lb fields meta44028]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 510, :max-fixed-arity 7, :fn-var true, :arglists (quote ([pretty-writer writer max-columns miser-width lb fields meta44028])), :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}}, capitalize-string {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1966, :column 8, :end-line 1966, :end-column 25, :private true, :arglists (quote ([s first?])), :doc "Capitalizes the words in a string. If first? is false, don't capitalize the\n                                      first character of the string even if it's a letter."}, :private true, :name cljs.pprint/capitalize-string, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 25, :method-params ([s first?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1966, :end-line 1966, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s first?])), :doc "Capitalizes the words in a string. If first? is false, don't capitalize the\n                                      first character of the string even if it's a letter."}, start-block {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 552, :column 8, :end-line 552, :end-column 19, :private true, :arglists (quote ([this prefix per-line-prefix suffix]))}, :private true, :name cljs.pprint/start-block, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 19, :method-params ([this prefix per-line-prefix suffix]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 552, :end-line 552, :max-fixed-arity 4, :fn-var true, :arglists (quote ([this prefix per-line-prefix suffix]))}, relative-tabulation {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 2126, :column 8, :end-line 2126, :end-column 27, :private true, :arglists (quote ([params navigator offsets]))}, :private true, :name cljs.pprint/relative-tabulation, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 27, :method-params ([params navigator offsets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2126, :end-line 2126, :max-fixed-arity 3, :fn-var true, :arglists (quote ([params navigator offsets]))}, set-pprint-dispatch {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 825, :column 7, :end-line 825, :end-column 26, :arglists (quote ([function]))}, :name cljs.pprint/set-pprint-dispatch, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 26, :method-params ([function]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 825, :end-line 825, :max-fixed-arity 1, :fn-var true, :arglists (quote ([function]))}, remainders {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1076, :column 8, :end-line 1076, :end-column 18, :private true, :arglists (quote ([base val])), :doc "Return the list of remainders (essentially the 'digits') of val in the given base"}, :private true, :name cljs.pprint/remainders, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 18, :method-params ([base val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1076, :end-line 1076, :max-fixed-arity 2, :fn-var true, :arglists (quote ([base val])), :doc "Return the list of remainders (essentially the 'digits') of val in the given base"}, fresh-line {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 2106, :column 7, :end-line 2106, :end-column 17, :arglists (quote ([])), :doc "Make a newline if *out* is not already at the beginning of the line. If *out* is\nnot a pretty writer (which keeps track of columns), this function always outputs a newline."}, :name cljs.pprint/fresh-line, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2106, :end-line 2106, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Make a newline if *out* is not already at the beginning of the line. If *out* is\nnot a pretty writer (which keeps track of columns), this function always outputs a newline."}, ->logical-block {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 231, :column 29, :end-line 231, :end-column 42, :private true, :internal-ctor true, :factory :positional, :arglists (quote ([parent section start-col indent done-nl intra-block-nl prefix per-line-prefix suffix logical-block-callback]))}, :private true, :name cljs.pprint/->logical-block, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 42, :method-params ([parent section start-col indent done-nl intra-block-nl prefix per-line-prefix suffix logical-block-callback]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 231, :end-line 231, :max-fixed-arity 10, :fn-var true, :arglists (quote ([parent section start-col indent done-nl intra-block-nl prefix per-line-prefix suffix logical-block-callback]))}, get-field {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 154, :column 8, :end-line 154, :end-column 17, :private true, :arglists (quote ([this sym]))}, :private true, :name cljs.pprint/get-field, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 17, :method-params ([this sym]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 154, :end-line 154, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this sym]))}, pprint-indent {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 853, :column 7, :end-line 853, :end-column 20, :arglists (quote ([relative-to n])), :doc "Create an indent at this point in the pretty printing stream. This defines how\nfollowing lines are indented. relative-to can be either :block or :current depending\nwhether the indent should be computed relative to the start of the logical block or\nthe current column position. n is an offset.\n\nThis function is intended for use when writing custom dispatch functions.\n\nOutput is sent to *out* which must be a pretty printing writer."}, :name cljs.pprint/pprint-indent, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 20, :method-params ([relative-to n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 853, :end-line 853, :max-fixed-arity 2, :fn-var true, :arglists (quote ([relative-to n])), :doc "Create an indent at this point in the pretty printing stream. This defines how\nfollowing lines are indented. relative-to can be either :block or :current depending\nwhether the indent should be computed relative to the start of the logical block or\nthe current column position. n is an offset.\n\nThis function is intended for use when writing custom dispatch functions.\n\nOutput is sent to *out* which must be a pretty printing writer."}, process-bracket {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 2588, :column 8, :end-line 2588, :end-column 23, :private true, :arglists (quote ([this remainder]))}, :private true, :name cljs.pprint/process-bracket, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 23, :method-params ([this remainder]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2588, :end-line 2588, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this remainder]))}, map->buffer-blob {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 251, :column 10, :end-line 251, :end-column 21, :internal-ctor true, :factory :map, :arglists (quote ([G__43903]))}, :name cljs.pprint/map->buffer-blob, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 21, :method-params ([G__43903]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 251, :end-line 251, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__43903]))}, format-old-roman {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1333, :column 8, :end-line 1333, :end-column 24, :private true, :arglists (quote ([params navigator offsets]))}, :private true, :name cljs.pprint/format-old-roman, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 24, :method-params ([params navigator offsets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1333, :end-line 1333, :max-fixed-arity 3, :fn-var true, :arglists (quote ([params navigator offsets]))}, format-error {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 933, :column 8, :end-line 933, :end-column 20, :private true, :arglists (quote ([message offset]))}, :private true, :name cljs.pprint/format-error, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 20, :method-params ([message offset]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 933, :end-line 933, :max-fixed-arity 2, :fn-var true, :arglists (quote ([message offset]))}, *print-radix* {:meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 671, :column 1, :end-line 671, :end-column 14, :doc "Print a radix specifier in front of integers and rationals. If *print-base* is 2, 8,\nor 16, then the radix specifier used is #b, #o, or #x, respectively. Otherwise the\nradix specifier is in the form #XXr where XX is the decimal value of *print-base* ", :added "1.2", :dynamic true}, :added "1.2", :name cljs.pprint/*print-radix*, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 14, :column 1, :dynamic true, :line 666, :end-line 671, :doc "Print a radix specifier in front of integers and rationals. If *print-base* is 2, 8,\nor 16, then the radix specifier used is #b, #o, or #x, respectively. Otherwise the\nradix specifier is in the form #XXr where XX is the decimal value of *print-base* "}, set-indent {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 2159, :column 8, :end-line 2159, :end-column 18, :private true, :arglists (quote ([params navigator offsets]))}, :private true, :name cljs.pprint/set-indent, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 18, :method-params ([params navigator offsets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2159, :end-line 2159, :max-fixed-arity 3, :fn-var true, :arglists (quote ([params navigator offsets]))}, map->arg-navigator {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 945, :column 3, :end-line 945, :end-column 16, :private true, :internal-ctor true, :factory :map, :arglists (quote ([G__44082]))}, :private true, :name cljs.pprint/map->arg-navigator, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 16, :method-params ([G__44082]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 944, :end-line 945, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__44082]))}, IPrettyFlush {:meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 145, :column 14, :end-line 145, :end-column 26, :doc nil, :protocol-symbol true, :protocol-info {:methods {-ppflush [[pp]]}}}, :protocol-symbol true, :name cljs.pprint/IPrettyFlush, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 26, :column 1, :line 145, :protocol-info {:methods {-ppflush [[pp]]}}, :info nil, :end-line 145, :impls #{cljs.pprint/t44021 cljs.pprint/t44027}, :doc nil}, t44027 {:num-fields 7, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IDeref cljs.pprint/IPrettyFlush cljs.core/IWithMeta}, :name cljs.pprint/t44027, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :type true, :anonymous true, :column 5, :line 510, :record false, :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}}, pretty-character {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1346, :column 8, :end-line 1346, :end-column 24, :private true, :arglists (quote ([params navigator offsets]))}, :private true, :name cljs.pprint/pretty-character, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 24, :method-params ([params navigator offsets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1346, :end-line 1346, :max-fixed-arity 3, :fn-var true, :arglists (quote ([params navigator offsets]))}, println {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 29, :column 8, :end-line 29, :end-column 15, :private true, :arglists (quote ([& more])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(more)], :arglists ([& more]), :arglists-meta (nil)}}, :private true, :name cljs.pprint/println, :variadic true, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(more)], :arglists ([& more]), :arglists-meta (nil)}, :method-params [(more)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 0, :fn-var true, :arglists ([& more])}, prefix-count {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 134, :column 8, :end-line 134, :end-column 20, :private true, :arglists (quote ([aseq val]))}, :private true, :name cljs.pprint/prefix-count, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 20, :method-params ([aseq val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 134, :end-line 134, :max-fixed-arity 2, :fn-var true, :arglists (quote ([aseq val]))}, compile-format {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 2685, :column 8, :end-line 2685, :end-column 22, :private true, :arglists (quote ([format-str])), :doc "Compiles format-str into a compiled format which can be used as an argument\nto cl-format just like a plain format string. Use this function for improved\nperformance when you're using the same format string repeatedly"}, :private true, :name cljs.pprint/compile-format, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 22, :method-params ([format-str]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2685, :end-line 2685, :max-fixed-arity 1, :fn-var true, :arglists (quote ([format-str])), :doc "Compiles format-str into a compiled format which can be used as an argument\nto cl-format just like a plain format string. Use this function for improved\nperformance when you're using the same format string repeatedly"}, is-whitespace? {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1990, :column 8, :end-line 1990, :end-column 22, :private true, :arglists (quote ([s]))}, :private true, :name cljs.pprint/is-whitespace?, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 22, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1990, :end-line 1990, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, separator? {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 2580, :column 8, :end-line 2580, :end-column 18, :private true, :arglists (quote ([this]))}, :private true, :name cljs.pprint/separator?, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2580, :end-line 2580, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this]))}, consume {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 86, :column 8, :end-line 86, :end-column 15, :private true, :arglists (quote ([func initial-context]))}, :private true, :name cljs.pprint/consume, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 15, :method-params ([func initial-context]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 86, :end-line 86, :max-fixed-arity 2, :fn-var true, :arglists (quote ([func initial-context]))}, modify-case {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 2055, :column 8, :end-line 2055, :end-column 19, :private true, :arglists (quote ([make-writer params navigator offsets]))}, :private true, :name cljs.pprint/modify-case, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 19, :method-params ([make-writer params navigator offsets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2055, :end-line 2055, :max-fixed-arity 4, :fn-var true, :arglists (quote ([make-writer params navigator offsets]))}, translate-param {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 2482, :column 8, :end-line 2482, :end-column 23, :private true, :arglists (quote ([[p offset]])), :doc "Translate the string representation of a param to the internalized\n                                      representation"}, :private true, :name cljs.pprint/translate-param, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 23, :method-params ([p__44427]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2482, :end-line 2482, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[p offset]])), :doc "Translate the string representation of a param to the internalized\n                                      representation"}, cl-format {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 894, :column 7, :end-line 894, :end-column 16, :arglists (quote ([writer format-in & args])), :doc "An implementation of a Common Lisp compatible format function. cl-format formats its\narguments to an output stream or string based on the format control string given. It\nsupports sophisticated formatting of structured data.\n\nWriter satisfies IWriter, true to output via *print-fn* or nil to output\nto a string, format-in is the format control string and the remaining arguments\nare the data to be formatted.\n\nThe format control string is a string to be output with embedded 'format directives'\ndescribing how to format the various arguments passed in.\n\nIf writer is nil, cl-format returns the formatted result string. Otherwise, cl-format\nreturns nil.\n\nFor example:\n (let [results [46 38 22]]\n        (cl-format true \"There ~[are~;is~:;are~]~:* ~d result~:p: ~{~d~^, ~}~%\"\n                   (count results) results))\n\nPrints via *print-fn*:\n There are 3 results: 46, 38, 22\n\nDetailed documentation on format control strings is available in the \"Common Lisp the\nLanguage, 2nd edition\", Chapter 22 (available online at:\nhttp://www.cs.cmu.edu/afs/cs.cmu.edu/project/ai-repository/ai/html/cltl/clm/node200.html#SECTION002633000000000000000)\nand in the Common Lisp HyperSpec at\nhttp://www.lispworks.com/documentation/HyperSpec/Body/22_c.htm", :see-also [["http://www.cs.cmu.edu/afs/cs.cmu.edu/project/ai-repository/ai/html/cltl/clm/node200.html#SECTION002633000000000000000" "Common Lisp the Language"] ["http://www.lispworks.com/documentation/HyperSpec/Body/22_c.htm" "Common Lisp HyperSpec"]], :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(writer format-in args)], :arglists ([writer format-in & args]), :arglists-meta (nil)}}, :name cljs.pprint/cl-format, :variadic true, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(writer format-in args)], :arglists ([writer format-in & args]), :arglists-meta (nil)}, :method-params [(writer format-in args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 894, :end-line 894, :max-fixed-arity 2, :fn-var true, :arglists ([writer format-in & args]), :see-also [["http://www.cs.cmu.edu/afs/cs.cmu.edu/project/ai-repository/ai/html/cltl/clm/node200.html#SECTION002633000000000000000" "Common Lisp the Language"] ["http://www.lispworks.com/documentation/HyperSpec/Body/22_c.htm" "Common Lisp HyperSpec"]], :doc "An implementation of a Common Lisp compatible format function. cl-format formats its\narguments to an output stream or string based on the format control string given. It\nsupports sophisticated formatting of structured data.\n\nWriter satisfies IWriter, true to output via *print-fn* or nil to output\nto a string, format-in is the format control string and the remaining arguments\nare the data to be formatted.\n\nThe format control string is a string to be output with embedded 'format directives'\ndescribing how to format the various arguments passed in.\n\nIf writer is nil, cl-format returns the formatted result string. Otherwise, cl-format\nreturns nil.\n\nFor example:\n (let [results [46 38 22]]\n        (cl-format true \"There ~[are~;is~:;are~]~:* ~d result~:p: ~{~d~^, ~}~%\"\n                   (count results) results))\n\nPrints via *print-fn*:\n There are 3 results: 46, 38, 22\n\nDetailed documentation on format control strings is available in the \"Common Lisp the\nLanguage, 2nd edition\", Chapter 22 (available online at:\nhttp://www.cs.cmu.edu/afs/cs.cmu.edu/project/ai-repository/ai/html/cltl/clm/node200.html#SECTION002633000000000000000)\nand in the Common Lisp HyperSpec at\nhttp://www.lispworks.com/documentation/HyperSpec/Body/22_c.htm"}, pprint-reader-macro {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 2807, :column 8, :end-line 2807, :end-column 27, :private true, :arglists (quote ([alis]))}, :private true, :name cljs.pprint/pprint-reader-macro, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 27, :method-params ([alis]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2807, :end-line 2807, :max-fixed-arity 1, :fn-var true, :arglists (quote ([alis]))}, format-logical-block {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 2141, :column 8, :end-line 2141, :end-column 28, :private true, :arglists (quote ([params navigator offsets]))}, :private true, :name cljs.pprint/format-logical-block, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 28, :method-params ([params navigator offsets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2141, :end-line 2141, :max-fixed-arity 3, :fn-var true, :arglists (quote ([params navigator offsets]))}, english-ordinal-units {:name cljs.pprint/english-ordinal-units, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :line 1152, :column 1, :end-line 1153, :end-column 27, :private true, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1153, :column 6, :end-line 1153, :end-column 27, :private true}}, directive-table {:name cljs.pprint/directive-table, :meta {:file nil}, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :line 2177, :column 1}, *format-str* {:name cljs.pprint/*format-str*, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :line 931, :column 1, :end-line 931, :end-column 45, :private true, :dynamic true, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 931, :column 33, :end-line 931, :end-column 45, :private true, :dynamic true}}, ->nl-t {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 254, :column 10, :end-line 254, :end-column 14, :internal-ctor true, :factory :positional, :arglists (quote ([type-tag type logical-block start-pos end-pos]))}, :name cljs.pprint/->nl-t, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 14, :method-params ([type-tag type logical-block start-pos end-pos]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 254, :end-line 254, :max-fixed-arity 5, :fn-var true, :arglists (quote ([type-tag type logical-block start-pos end-pos]))}, compile-directive {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 2555, :column 8, :end-line 2555, :end-column 25, :private true, :arglists (quote ([s offset]))}, :private true, :name cljs.pprint/compile-directive, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 25, :method-params ([s offset]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2555, :end-line 2555, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s offset]))}, two-forms {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 3163, :column 8, :end-line 3163, :end-column 17, :private true, :arglists (quote ([amap]))}, :private true, :name cljs.pprint/two-forms, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 17, :method-params ([amap]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3163, :end-line 3163, :max-fixed-arity 1, :fn-var true, :arglists (quote ([amap]))}, *current-level* {:name cljs.pprint/*current-level*, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :line 683, :column 1, :end-line 683, :end-column 48, :private true, :dynamic true, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 683, :column 33, :end-line 683, :end-column 48, :private true, :dynamic true}}, add-core-ns {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 3170, :column 8, :end-line 3170, :end-column 19, :private true, :arglists (quote ([amap]))}, :private true, :name cljs.pprint/add-core-ns, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 19, :method-params ([amap]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3170, :end-line 3170, :max-fixed-arity 1, :fn-var true, :arglists (quote ([amap]))}, *print-lines* {:meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 644, :column 1, :end-line 644, :end-column 14, :private true, :doc "Maximum number of lines to print in a pretty print instance (N.B. This is not yet used)", :dynamic true}, :private true, :name cljs.pprint/*print-lines*, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 14, :column 1, :dynamic true, :line 641, :end-line 644, :doc "Maximum number of lines to print in a pretty print instance (N.B. This is not yet used)"}, render-clauses {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1846, :column 8, :end-line 1846, :end-column 22, :private true, :arglists (quote ([clauses navigator base-navigator]))}, :private true, :name cljs.pprint/render-clauses, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 22, :method-params ([clauses navigator base-navigator]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1846, :end-line 1846, :max-fixed-arity 3, :fn-var true, :arglists (quote ([clauses navigator base-navigator]))}, format-ascii {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1043, :column 8, :end-line 1043, :end-column 20, :private true, :arglists (quote ([print-func params arg-navigator offsets]))}, :private true, :name cljs.pprint/format-ascii, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 20, :method-params ([print-func params arg-navigator offsets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1043, :end-line 1043, :max-fixed-arity 4, :fn-var true, :arglists (quote ([print-func params arg-navigator offsets]))}, format-simple-cardinal {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1179, :column 8, :end-line 1179, :end-column 30, :private true, :arglists (quote ([num])), :doc "Convert a number less than 1000 to a cardinal english string"}, :private true, :name cljs.pprint/format-simple-cardinal, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 30, :method-params ([num]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1179, :end-line 1179, :max-fixed-arity 1, :fn-var true, :arglists (quote ([num])), :doc "Convert a number less than 1000 to a cardinal english string"}, ->buffer-blob {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 251, :column 10, :end-line 251, :end-column 21, :internal-ctor true, :factory :positional, :arglists (quote ([type-tag data trailing-white-space start-pos end-pos]))}, :name cljs.pprint/->buffer-blob, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 21, :method-params ([type-tag data trailing-white-space start-pos end-pos]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 251, :end-line 251, :max-fixed-arity 5, :fn-var true, :arglists (quote ([type-tag data trailing-white-space start-pos end-pos]))}, map->end-block-t {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 258, :column 10, :end-line 258, :end-column 21, :internal-ctor true, :factory :map, :arglists (quote ([G__43927]))}, :name cljs.pprint/map->end-block-t, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 21, :method-params ([G__43927]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 258, :end-line 258, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__43927]))}, map->start-block-t {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 256, :column 10, :end-line 256, :end-column 23, :internal-ctor true, :factory :map, :arglists (quote ([G__43919]))}, :name cljs.pprint/map->start-block-t, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 23, :method-params ([G__43919]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 256, :end-line 256, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__43919]))}, *print-miser-width* {:meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 638, :column 2, :end-line 638, :end-column 21, :doc "The column at which to enter miser style. Depending on the dispatch table,\nmiser style add newlines in more places to try to keep lines short allowing for further\nlevels of nesting.", :added "1.2", :dynamic true}, :added "1.2", :name cljs.pprint/*print-miser-width*, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 21, :column 1, :dynamic true, :line 633, :end-line 638, :doc "The column at which to enter miser style. Depending on the dispatch table,\nmiser style add newlines in more places to try to keep lines short allowing for further\nlevels of nesting."}, old-roman-table {:name cljs.pprint/old-roman-table, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :line 1295, :column 1, :end-line 1296, :end-column 21, :private true, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1296, :column 6, :end-line 1296, :end-column 21, :private true}}, pprint-pqueue {:name cljs.pprint/pprint-pqueue, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :line 2897, :column 1, :end-line 2897, :end-column 36, :private true, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 2897, :column 23, :end-line 2897, :end-column 36, :private true}}, get-line {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 163, :column 8, :end-line 163, :end-column 16, :private true, :arglists (quote ([this]))}, :private true, :name cljs.pprint/get-line, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 163, :end-line 163, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this]))}, pprint-map {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 2852, :column 8, :end-line 2852, :end-column 18, :private true, :arglists (quote ([amap]))}, :private true, :name cljs.pprint/pprint-map, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 18, :method-params ([amap]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2852, :end-line 2852, :max-fixed-arity 1, :fn-var true, :arglists (quote ([amap]))}, ->t43885 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([writer max-columns fields meta43886])), :file nil}, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :name cljs.pprint/->t43885, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :method-params ([writer max-columns fields meta43886]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 6, :factory :positional, :line 189, :max-fixed-arity 4, :fn-var true, :arglists (quote ([writer max-columns fields meta43886])), :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}}, ->end-block-t {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 258, :column 10, :end-line 258, :end-column 21, :internal-ctor true, :factory :positional, :arglists (quote ([type-tag logical-block start-pos end-pos]))}, :name cljs.pprint/->end-block-t, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 21, :method-params ([type-tag logical-block start-pos end-pos]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 258, :end-line 258, :max-fixed-arity 4, :fn-var true, :arglists (quote ([type-tag logical-block start-pos end-pos]))}, *out* {:name cljs.pprint/*out*, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :line 20, :column 1, :end-line 20, :end-column 21, :dynamic true, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 20, :column 16, :end-line 20, :end-column 21, :dynamic true}}, expand-fixed {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1486, :column 8, :end-line 1486, :end-column 20, :private true, :arglists (quote ([m e d]))}, :private true, :name cljs.pprint/expand-fixed, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 20, :method-params ([m e d]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1486, :end-line 1486, :max-fixed-arity 3, :fn-var true, :arglists (quote ([m e d]))}, t44327 {:num-fields 4, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.pprint/t44327, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :type true, :anonymous true, :column 5, :line 1998, :record false, :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}}, format-simple-number {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1033, :column 8, :end-line 1033, :end-column 28, :private true, :arglists (quote ([n]))}, :private true, :name cljs.pprint/format-simple-number, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 28, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1033, :end-line 1033, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n]))}, format-roman {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1309, :column 8, :end-line 1309, :end-column 20, :private true, :arglists (quote ([table params navigator offsets])), :doc "Format a roman numeral using the specified look-up table"}, :private true, :name cljs.pprint/format-roman, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 20, :method-params ([table params navigator offsets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1309, :end-line 1309, :max-fixed-arity 4, :fn-var true, :arglists (quote ([table params navigator offsets])), :doc "Format a roman numeral using the specified look-up table"}, emit-nl {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 383, :column 8, :end-line 383, :end-column 15, :private true, :arglists (quote ([this nl]))}, :private true, :name cljs.pprint/emit-nl, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 15, :method-params ([this nl]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 383, :end-line 383, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this nl]))}, pprint-simple-code-list {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 3150, :column 8, :end-line 3150, :end-column 31, :private true, :arglists (quote ([alis]))}, :private true, :name cljs.pprint/pprint-simple-code-list, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 31, :method-params ([alis]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3150, :end-line 3150, :max-fixed-arity 1, :fn-var true, :arglists (quote ([alis]))}, ->t44297 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([downcase-writer writer meta44298])), :file nil}, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.pprint/->t44297, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :method-params ([downcase-writer writer meta44298]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 1920, :max-fixed-arity 3, :fn-var true, :arglists (quote ([downcase-writer writer meta44298])), :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}}, print {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 26, :column 8, :end-line 26, :end-column 13, :private true, :arglists (quote ([& more])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(more)], :arglists ([& more]), :arglists-meta (nil)}}, :private true, :name cljs.pprint/print, :variadic true, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(more)], :arglists ([& more]), :arglists-meta (nil)}, :method-params [(more)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 0, :fn-var true, :arglists ([& more])}, pprint-code-list {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 3196, :column 8, :end-line 3196, :end-column 24, :private true, :arglists (quote ([alis]))}, :private true, :name cljs.pprint/pprint-code-list, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 24, :method-params ([alis]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3196, :end-line 3196, :max-fixed-arity 1, :fn-var true, :arglists (quote ([alis]))}, make-pretty-writer {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 720, :column 8, :end-line 720, :end-column 26, :private true, :arglists (quote ([base-writer right-margin miser-width])), :doc "Wrap base-writer in a PrettyWriter with the specified right-margin and miser-width"}, :private true, :name cljs.pprint/make-pretty-writer, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 26, :method-params ([base-writer right-margin miser-width]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 720, :end-line 720, :max-fixed-arity 3, :fn-var true, :arglists (quote ([base-writer right-margin miser-width])), :doc "Wrap base-writer in a PrettyWriter with the specified right-margin and miser-width"}, new-roman-table {:name cljs.pprint/new-roman-table, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :line 1302, :column 1, :end-line 1303, :end-column 21, :private true, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1303, :column 6, :end-line 1303, :end-column 21, :private true}}, pprint-simple-default {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 2869, :column 8, :end-line 2869, :end-column 29, :private true, :arglists (quote ([obj]))}, :private true, :name cljs.pprint/pprint-simple-default, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 29, :method-params ([obj]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2869, :end-line 2869, :max-fixed-arity 1, :fn-var true, :arglists (quote ([obj]))}, float-parts {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1412, :column 8, :end-line 1412, :end-column 19, :private true, :arglists (quote ([f])), :doc "Take care of leading and trailing zeros in decomposed floats"}, :private true, :name cljs.pprint/float-parts, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 19, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1412, :end-line 1412, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f])), :doc "Take care of leading and trailing zeros in decomposed floats"}, nl-t? {:protocol-inline nil, :meta {:private true, :arglists (quote ([x__43072__auto__])), :file nil}, :private true, :name cljs.pprint/nl-t?, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :method-params ([x__43072__auto__]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 254, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x__43072__auto__]))}, write {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 749, :column 7, :end-line 749, :end-column 12, :arglists (quote ([object & kw-args])), :doc "Write an object subject to the current bindings of the printer control variables.\nUse the kw-args argument to override individual variables for this call (and any\nrecursive calls). Returns the string result if :stream is nil or nil otherwise.\n\nThe following keyword arguments can be passed with values:\n  Keyword              Meaning                              Default value\n  :stream              Writer for output or nil             true (indicates *out*)\n  :base                Base to use for writing rationals    Current value of *print-base*\n  :circle*             If true, mark circular structures    Current value of *print-circle*\n  :length              Maximum elements to show in sublists Current value of *print-length*\n  :level               Maximum depth                        Current value of *print-level*\n  :lines*              Maximum lines of output              Current value of *print-lines*\n  :miser-width         Width to enter miser mode            Current value of *print-miser-width*\n  :dispatch            The pretty print dispatch function   Current value of *print-pprint-dispatch*\n  :pretty              If true, do pretty printing          Current value of *print-pretty*\n  :radix               If true, prepend a radix specifier   Current value of *print-radix*\n  :readably*           If true, print readably              Current value of *print-readably*\n  :right-margin        The column for the right margin      Current value of *print-right-margin*\n  :suppress-namespaces If true, no namespaces in symbols    Current value of *print-suppress-namespaces*\n\n  * = not yet supported\n", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(object kw-args)], :arglists ([object & kw-args]), :arglists-meta (nil)}}, :name cljs.pprint/write, :variadic true, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(object kw-args)], :arglists ([object & kw-args]), :arglists-meta (nil)}, :method-params [(object kw-args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 749, :end-line 749, :max-fixed-arity 1, :fn-var true, :arglists ([object & kw-args]), :doc "Write an object subject to the current bindings of the printer control variables.\nUse the kw-args argument to override individual variables for this call (and any\nrecursive calls). Returns the string result if :stream is nil or nil otherwise.\n\nThe following keyword arguments can be passed with values:\n  Keyword              Meaning                              Default value\n  :stream              Writer for output or nil             true (indicates *out*)\n  :base                Base to use for writing rationals    Current value of *print-base*\n  :circle*             If true, mark circular structures    Current value of *print-circle*\n  :length              Maximum elements to show in sublists Current value of *print-length*\n  :level               Maximum depth                        Current value of *print-level*\n  :lines*              Maximum lines of output              Current value of *print-lines*\n  :miser-width         Width to enter miser mode            Current value of *print-miser-width*\n  :dispatch            The pretty print dispatch function   Current value of *print-pprint-dispatch*\n  :pretty              If true, do pretty printing          Current value of *print-pretty*\n  :radix               If true, prepend a radix specifier   Current value of *print-radix*\n  :readably*           If true, print readably              Current value of *print-readably*\n  :right-margin        The column for the right margin      Current value of *print-right-margin*\n  :suppress-namespaces If true, no namespaces in symbols    Current value of *print-suppress-namespaces*\n\n  * = not yet supported\n"}, single-defn {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 3015, :column 8, :end-line 3015, :end-column 19, :private true, :arglists (quote ([alis has-doc-str?]))}, :private true, :name cljs.pprint/single-defn, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 19, :method-params ([alis has-doc-str?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3015, :end-line 3015, :max-fixed-arity 2, :fn-var true, :arglists (quote ([alis has-doc-str?]))}, pprint-condp {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 3106, :column 8, :end-line 3106, :end-column 20, :private true, :arglists (quote ([alis]))}, :private true, :name cljs.pprint/pprint-condp, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 20, :method-params ([alis]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3106, :end-line 3106, :max-fixed-arity 1, :fn-var true, :arglists (quote ([alis]))}, right-bracket {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 2578, :column 8, :end-line 2578, :end-column 21, :private true, :arglists (quote ([this]))}, :private true, :name cljs.pprint/right-bracket, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 21, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2578, :end-line 2578, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this]))}, set-field {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 157, :column 8, :end-line 157, :end-column 17, :private true, :arglists (quote ([this sym new-val]))}, :private true, :name cljs.pprint/set-field, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 17, :method-params ([this sym new-val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 157, :end-line 157, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this sym new-val]))}, get-writer {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 173, :column 8, :end-line 173, :end-column 18, :private true, :arglists (quote ([this]))}, :private true, :name cljs.pprint/get-writer, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 173, :end-line 173, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this]))}, ->indent-t {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 260, :column 10, :end-line 260, :end-column 18, :internal-ctor true, :factory :positional, :arglists (quote ([type-tag logical-block relative-to offset start-pos end-pos]))}, :name cljs.pprint/->indent-t, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 18, :method-params ([type-tag logical-block relative-to offset start-pos end-pos]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 260, :end-line 260, :max-fixed-arity 6, :fn-var true, :arglists (quote ([type-tag logical-block relative-to offset start-pos end-pos]))}, english-ordinal-tens {:name cljs.pprint/english-ordinal-tens, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :line 1162, :column 1, :end-line 1163, :end-column 26, :private true, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1163, :column 6, :end-line 1163, :end-column 26, :private true}}, nl {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 587, :column 8, :end-line 587, :end-column 10, :private true, :arglists (quote ([this type]))}, :private true, :name cljs.pprint/nl, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 10, :method-params ([this type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 587, :end-line 587, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this type]))}, t43885 {:num-fields 4, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :name cljs.pprint/t43885, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :type true, :anonymous true, :column 6, :line 189, :record false, :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}}, choice-conditional {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1690, :column 8, :end-line 1690, :end-column 26, :private true, :arglists (quote ([params arg-navigator offsets]))}, :private true, :name cljs.pprint/choice-conditional, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 26, :method-params ([params arg-navigator offsets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1690, :end-line 1690, :max-fixed-arity 3, :fn-var true, :arglists (quote ([params arg-navigator offsets]))}, t44321 {:num-fields 4, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.pprint/t44321, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :type true, :anonymous true, :column 5, :line 1998, :record false, :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}}, check-arg-conditional {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1714, :column 8, :end-line 1714, :end-column 29, :private true, :arglists (quote ([params arg-navigator offsets]))}, :private true, :name cljs.pprint/check-arg-conditional, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 29, :method-params ([params arg-navigator offsets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1714, :end-line 1714, :max-fixed-arity 3, :fn-var true, :arglists (quote ([params arg-navigator offsets]))}, reader-macros {:name cljs.pprint/reader-macros, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :line 2799, :column 1, :end-line 2799, :end-column 36, :private true, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 2799, :column 23, :end-line 2799, :end-column 36, :private true}}, format-cardinal-english {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1220, :column 8, :end-line 1220, :end-column 31, :private true, :arglists (quote ([params navigator offsets]))}, :private true, :name cljs.pprint/format-cardinal-english, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 31, :method-params ([params navigator offsets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1220, :end-line 1220, :max-fixed-arity 3, :fn-var true, :arglists (quote ([params navigator offsets]))}, extract-param {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 2465, :column 8, :end-line 2465, :end-column 21, :private true, :arglists (quote ([[s offset saw-comma]]))}, :private true, :name cljs.pprint/extract-param, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 21, :method-params ([p__44424]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2465, :end-line 2465, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[s offset saw-comma]]))}, get-fixed {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1504, :column 8, :end-line 1504, :end-column 17, :private true, :arglists (quote ([m e d]))}, :private true, :name cljs.pprint/get-fixed, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 17, :method-params ([m e d]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1504, :end-line 1504, :max-fixed-arity 3, :fn-var true, :arglists (quote ([m e d]))}, ->t44333 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([init-cap-writer writer capped meta44334])), :file nil}, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.pprint/->t44333, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :method-params ([init-cap-writer writer capped meta44334]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 2024, :max-fixed-arity 4, :fn-var true, :arglists (quote ([init-cap-writer writer capped meta44334])), :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}}, make-indent-t {:protocol-inline nil, :meta {:private true, :arglists (quote ([logical-block relative-to offset start-pos end-pos])), :file nil}, :private true, :name cljs.pprint/make-indent-t, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :method-params ([logical-block relative-to offset start-pos end-pos]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 260, :max-fixed-arity 5, :fn-var true, :arglists (quote ([logical-block relative-to offset start-pos end-pos]))}, flag-defs {:name cljs.pprint/flag-defs, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :line 2494, :column 1, :end-line 2495, :end-column 15, :private true, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 2495, :column 6, :end-line 2495, :end-column 15, :private true}}, -ppflush {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 146, :column 4, :end-line 146, :end-column 12, :protocol cljs.pprint/IPrettyFlush, :doc nil, :arglists (quote ([pp]))}, :protocol cljs.pprint/IPrettyFlush, :name cljs.pprint/-ppflush, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 12, :method-params ([pp]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 145, :end-line 146, :max-fixed-arity 1, :fn-var true, :arglists (quote ([pp])), :doc nil}, miser-nl? {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 329, :column 8, :end-line 329, :end-column 17, :private true, :arglists (quote ([this lb section]))}, :private true, :name cljs.pprint/miser-nl?, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 17, :method-params ([this lb section]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 329, :end-line 329, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this lb section]))}, iterate-sublist {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1731, :column 8, :end-line 1731, :end-column 23, :private true, :arglists (quote ([params navigator offsets]))}, :private true, :name cljs.pprint/iterate-sublist, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 23, :method-params ([params navigator offsets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1731, :end-line 1731, :max-fixed-arity 3, :fn-var true, :arglists (quote ([params navigator offsets]))}, t44297 {:num-fields 3, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.pprint/t44297, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :type true, :anonymous true, :column 3, :line 1920, :record false, :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}}, *print-right-margin* {:meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 631, :column 2, :end-line 631, :end-column 22, :doc "Pretty printing will try to avoid anything going beyond this column.\nSet it to nil to have pprint let the line be arbitrarily long. This will ignore all\nnon-mandatory newlines.", :added "1.2", :dynamic true}, :added "1.2", :name cljs.pprint/*print-right-margin*, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 22, :column 1, :dynamic true, :line 626, :end-line 631, :doc "Pretty printing will try to avoid anything going beyond this column.\nSet it to nil to have pprint let the line be arbitrarily long. This will ignore all\nnon-mandatory newlines."}, abort? {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1375, :column 8, :end-line 1375, :end-column 14, :private true, :arglists (quote ([context]))}, :private true, :name cljs.pprint/abort?, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 14, :method-params ([context]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1375, :end-line 1375, :max-fixed-arity 1, :fn-var true, :arglists (quote ([context]))}, map->indent-t {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 260, :column 10, :end-line 260, :end-column 18, :internal-ctor true, :factory :map, :arglists (quote ([G__43935]))}, :name cljs.pprint/map->indent-t, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 18, :method-params ([G__43935]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 260, :end-line 260, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__43935]))}, type-map {:name cljs.pprint/type-map, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :line 2875, :column 1, :end-line 2876, :end-column 9, :private true, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 2876, :column 1, :end-line 2876, :end-column 9, :private true}}, buffer-blob {:num-fields 5, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name cljs.pprint/buffer-blob, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 21, :type true, :column 10, :internal-ctor true, :line 251, :record true, :end-line 251, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, capitalize-word-writer {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1994, :column 8, :end-line 1994, :end-column 30, :private true, :arglists (quote ([writer])), :doc "Returns a proxy that wraps writer, capitalizing all words"}, :private true, :name cljs.pprint/capitalize-word-writer, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 30, :method-params ([writer]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1994, :end-line 1994, :max-fixed-arity 1, :fn-var true, :arglists (quote ([writer])), :doc "Returns a proxy that wraps writer, capitalizing all words"}, t44309 {:num-fields 3, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.pprint/t44309, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :type true, :anonymous true, :column 3, :line 1941, :record false, :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}}, write-out {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 725, :column 7, :end-line 725, :end-column 16, :arglists (quote ([object])), :doc "Write an object to *out* subject to the current bindings of the printer control\nvariables. Use the kw-args argument to override individual variables for this call (and\nany recursive calls).\n\n*out* must be a PrettyWriter if pretty printing is enabled. This is the responsibility\nof the caller.\n\nThis method is primarily intended for use by pretty print dispatch functions that\nalready know that the pretty printer will have set up their environment appropriately.\nNormal library clients should use the standard \"write\" interface. "}, :name cljs.pprint/write-out, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 16, :method-params ([object]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 725, :end-line 725, :max-fixed-arity 1, :fn-var true, :arglists (quote ([object])), :doc "Write an object to *out* subject to the current bindings of the printer control\nvariables. Use the kw-args argument to override individual variables for this call (and\nany recursive calls).\n\n*out* must be a PrettyWriter if pretty printing is enabled. This is the responsibility\nof the caller.\n\nThis method is primarily intended for use by pretty print dispatch functions that\nalready know that the pretty printer will have set up their environment appropriately.\nNormal library clients should use the standard \"write\" interface. "}, exponential-float {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1567, :column 8, :end-line 1567, :end-column 25, :private true, :arglists (quote ([params navigator offset]))}, :private true, :name cljs.pprint/exponential-float, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 25, :method-params ([params navigator offset]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1567, :end-line 1567, :max-fixed-arity 3, :fn-var true, :arglists (quote ([params navigator offset]))}, format-ordinal-english {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1259, :column 8, :end-line 1259, :end-column 30, :private true, :arglists (quote ([params navigator offsets]))}, :private true, :name cljs.pprint/format-ordinal-english, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 30, :method-params ([params navigator offsets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1259, :end-line 1259, :max-fixed-arity 3, :fn-var true, :arglists (quote ([params navigator offsets]))}, convert-ratio {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1515, :column 8, :end-line 1515, :end-column 21, :private true, :arglists (quote ([x]))}, :private true, :name cljs.pprint/convert-ratio, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 21, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1515, :end-line 1515, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, ancestor? {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 237, :column 8, :end-line 237, :end-column 17, :private true, :arglists (quote ([parent child]))}, :private true, :name cljs.pprint/ancestor?, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 17, :method-params ([parent child]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 237, :end-line 237, :max-fixed-arity 2, :fn-var true, :arglists (quote ([parent child]))}, plain-character {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1368, :column 8, :end-line 1368, :end-column 23, :private true, :arglists (quote ([params navigator offsets]))}, :private true, :name cljs.pprint/plain-character, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 23, :method-params ([params navigator offsets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1368, :end-line 1368, :max-fixed-arity 3, :fn-var true, :arglists (quote ([params navigator offsets]))}, format-new-roman {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1336, :column 8, :end-line 1336, :end-column 24, :private true, :arglists (quote ([params navigator offsets]))}, :private true, :name cljs.pprint/format-new-roman, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 24, :method-params ([params navigator offsets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1336, :end-line 1336, :max-fixed-arity 3, :fn-var true, :arglists (quote ([params navigator offsets]))}, print-char {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 33, :column 8, :end-line 33, :end-column 18, :private true, :arglists (quote ([c]))}, :private true, :name cljs.pprint/print-char, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 18, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c]))}, map-params {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 2525, :column 8, :end-line 2525, :end-column 18, :private true, :arglists (quote ([def params flags offset])), :doc "Takes a directive definition and the list of actual parameters and\na map of flags and returns a map of the parameters and flags with defaults\nfilled in. We check to make sure that there are the right types and number\nof parameters as well."}, :private true, :name cljs.pprint/map-params, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 18, :method-params ([def params flags offset]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2525, :end-line 2525, :max-fixed-arity 4, :fn-var true, :arglists (quote ([def params flags offset])), :doc "Takes a directive definition and the list of actual parameters and\na map of flags and returns a map of the parameters and flags with defaults\nfilled in. We check to make sure that there are the right types and number\nof parameters as well."}, consume-while {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 94, :column 8, :end-line 94, :end-column 21, :private true, :arglists (quote ([func initial-context]))}, :private true, :name cljs.pprint/consume-while, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 21, :method-params ([func initial-context]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 94, :end-line 94, :max-fixed-arity 2, :fn-var true, :arglists (quote ([func initial-context]))}, IWriter {:impls (cljs.pprint/t44339 cljs.pprint/t44333 cljs.pprint/t44327 cljs.pprint/t44321 cljs.pprint/t44315 cljs.pprint/t44309 cljs.pprint/t44303 cljs.pprint/t44297 cljs.pprint/t44027 cljs.pprint/t44021 cljs.pprint/t43885)}, buffer-blob? {:protocol-inline nil, :meta {:private true, :arglists (quote ([x__43072__auto__])), :file nil}, :private true, :name cljs.pprint/buffer-blob?, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :method-params ([x__43072__auto__]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 251, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x__43072__auto__]))}, english-cardinal-units {:name cljs.pprint/english-cardinal-units, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :line 1146, :column 1, :end-line 1147, :end-column 28, :private true, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1147, :column 6, :end-line 1147, :end-column 28, :private true}}, absolute-reposition {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 977, :column 8, :end-line 977, :end-column 27, :private true, :arglists (quote ([navigator position]))}, :private true, :name cljs.pprint/absolute-reposition, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 27, :method-params ([navigator position]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 977, :end-line 977, :max-fixed-arity 2, :fn-var true, :arglists (quote ([navigator position]))}, IDeref {:impls (cljs.pprint/t44027 cljs.pprint/t44021 cljs.pprint/t43885)}, *default-page-width* {:name cljs.pprint/*default-page-width*, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :line 152, :column 1, :end-line 152, :end-column 53, :private true, :dynamic true, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 152, :column 33, :end-line 152, :end-column 53, :private true, :dynamic true}}, make-start-block-t {:protocol-inline nil, :meta {:private true, :arglists (quote ([logical-block start-pos end-pos])), :file nil}, :private true, :name cljs.pprint/make-start-block-t, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :method-params ([logical-block start-pos end-pos]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 256, :max-fixed-arity 3, :fn-var true, :arglists (quote ([logical-block start-pos end-pos]))}, p-write-char {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 479, :column 8, :end-line 479, :end-column 20, :private true, :arglists (quote ([this c]))}, :private true, :name cljs.pprint/p-write-char, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 20, :method-params ([this c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 479, :end-line 479, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this c]))}, tokens-fit? {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 319, :column 8, :end-line 319, :end-column 19, :private true, :arglists (quote ([this tokens]))}, :private true, :name cljs.pprint/tokens-fit?, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 19, :method-params ([this tokens]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 319, :end-line 319, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this tokens]))}, use-method {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 2774, :column 8, :end-line 2774, :end-column 18, :private true, :arglists (quote ([multifn dispatch-val func])), :doc "Installs a function as a new method of multimethod associated with dispatch-value. "}, :private true, :name cljs.pprint/use-method, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 18, :method-params ([multifn dispatch-val func]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2774, :end-line 2774, :max-fixed-arity 3, :fn-var true, :arglists (quote ([multifn dispatch-val func])), :doc "Installs a function as a new method of multimethod associated with dispatch-value. "}, pprint-simple-list {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 2824, :column 8, :end-line 2824, :end-column 26, :private true, :arglists (quote ([alis]))}, :private true, :name cljs.pprint/pprint-simple-list, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 26, :method-params ([alis]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2824, :end-line 2824, :max-fixed-arity 1, :fn-var true, :arglists (quote ([alis]))}, ->compiled-directive {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 989, :column 3, :end-line 989, :end-column 21, :private true, :internal-ctor true, :factory :positional, :arglists (quote ([func def params offset]))}, :private true, :name cljs.pprint/->compiled-directive, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 21, :method-params ([func def params offset]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 988, :end-line 989, :max-fixed-arity 4, :fn-var true, :arglists (quote ([func def params offset]))}, pprint-if {:name cljs.pprint/pprint-if, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :line 3084, :column 1, :end-line 3084, :end-column 32, :private true, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 3084, :column 23, :end-line 3084, :end-column 32, :private true}}, ->t44321 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([capitalize-word-writer writer last-was-whitespace? meta44322])), :file nil}, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.pprint/->t44321, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :method-params ([capitalize-word-writer writer last-was-whitespace? meta44322]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 1998, :max-fixed-arity 4, :fn-var true, :arglists (quote ([capitalize-word-writer writer last-was-whitespace? meta44322])), :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}}, add-to-buffer {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 434, :column 8, :end-line 434, :end-column 21, :private true, :arglists (quote ([this token]))}, :private true, :name cljs.pprint/add-to-buffer, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 21, :method-params ([this token]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 434, :end-line 434, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this token]))}, absolute-tabulation {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 2115, :column 8, :end-line 2115, :end-column 27, :private true, :arglists (quote ([params navigator offsets]))}, :private true, :name cljs.pprint/absolute-tabulation, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 27, :method-params ([params navigator offsets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2115, :end-line 2115, :max-fixed-arity 3, :fn-var true, :arglists (quote ([params navigator offsets]))}, extract-flags {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 2497, :column 8, :end-line 2497, :end-column 21, :private true, :arglists (quote ([s offset]))}, :private true, :name cljs.pprint/extract-flags, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 21, :method-params ([s offset]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2497, :end-line 2497, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s offset]))}, map-ref-type {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 2879, :column 8, :end-line 2879, :end-column 20, :private true, :arglists (quote ([name])), :doc "Map ugly type names to something simpler"}, :private true, :name cljs.pprint/map-ref-type, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 20, :method-params ([name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2879, :end-line 2879, :max-fixed-arity 1, :fn-var true, :arglists (quote ([name])), :doc "Map ugly type names to something simpler"}, extract-params {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 2479, :column 8, :end-line 2479, :end-column 22, :private true, :arglists (quote ([s offset]))}, :private true, :name cljs.pprint/extract-params, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 22, :method-params ([s offset]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2479, :end-line 2479, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s offset]))}, make-end-block-t {:protocol-inline nil, :meta {:private true, :arglists (quote ([logical-block start-pos end-pos])), :file nil}, :private true, :name cljs.pprint/make-end-block-t, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :method-params ([logical-block start-pos end-pos]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 258, :max-fixed-arity 3, :fn-var true, :arglists (quote ([logical-block start-pos end-pos]))}, tuple-map {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 109, :column 8, :end-line 109, :end-column 17, :private true, :arglists (quote ([m v1]))}, :private true, :name cljs.pprint/tuple-map, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 17, :method-params ([m v1]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 109, :end-line 109, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m v1]))}, *print-base* {:meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 676, :column 1, :end-line 676, :end-column 13, :doc "The base to use for printing integers and rationals.", :added "1.2", :dynamic true}, :added "1.2", :name cljs.pprint/*print-base*, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 13, :column 1, :dynamic true, :line 673, :end-line 676, :doc "The base to use for printing integers and rationals."}, table-ize {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 711, :column 8, :end-line 711, :end-column 17, :private true, :arglists (quote ([t m]))}, :private true, :name cljs.pprint/table-ize, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 17, :method-params ([t m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 711, :end-line 711, :max-fixed-arity 2, :fn-var true, :arglists (quote ([t m]))}, pretty-writer? {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 716, :column 8, :end-line 716, :end-column 22, :private true, :arglists (quote ([x])), :doc "Return true iff x is a PrettyWriter"}, :private true, :name cljs.pprint/pretty-writer?, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 22, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 716, :end-line 716, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Return true iff x is a PrettyWriter"}, pprint-defn {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 3030, :column 8, :end-line 3030, :end-column 19, :private true, :arglists (quote ([alis]))}, :private true, :name cljs.pprint/pprint-defn, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 19, :method-params ([alis]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3030, :end-line 3030, :max-fixed-arity 1, :fn-var true, :arglists (quote ([alis]))}, ->t44309 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([upcase-writer writer meta44310])), :file nil}, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.pprint/->t44309, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :method-params ([upcase-writer writer meta44310]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 1941, :max-fixed-arity 3, :fn-var true, :arglists (quote ([upcase-writer writer meta44310])), :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}}, downcase-writer {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1917, :column 8, :end-line 1917, :end-column 23, :private true, :arglists (quote ([writer])), :doc "Returns a proxy that wraps writer, converting all characters to lower case"}, :private true, :name cljs.pprint/downcase-writer, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 23, :method-params ([writer]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1917, :end-line 1917, :max-fixed-arity 1, :fn-var true, :arglists (quote ([writer])), :doc "Returns a proxy that wraps writer, converting all characters to lower case"}}, :require-macros {m cljs.pprint, cljs.pprint cljs.pprint}, :cljs.analyzer/constants {:seen #{:mandatory :logical-blocks :arg3 :suffix :selector :else-params :block :allows-separator :indent :miser-width :buffer-block :arg2 :commainterval :pretty-writer :parent :sections :private :else :miser :right-margin :offset :cur :queue :default :added :func :ns :symbol :generator-fn :name :n :w :not-delivered :remaining-arg-count :fill :section :file :end-pos :circle :end-column :mode :start :lines :params :max-iterations :pos :writing :type :parameter-from-args :done-nl :suppress-namespaces :relative-to :string :vector :e :char-format :start-col :radix :colon-up-arrow :k :prefix :column :colon :stream :level :readably :right-bracket :dispatch :padchar :buffer-blob :dynamic :buffering :line :list :right-params :max :trailing-white-space :mincol :minpad :current :at :deref :count :per-line-prefix :colnum :length :overflowchar :end-line :right :colinc :both :d :def :clauses :indent-t :linear :seq :first :bracket-info :set :base-args :pretty :end :logical-block-callback :base :arglists :hierarchy :buffer-level :intra-block-nl :line-relative :separator :flags :doc :directive :section-relative :logical-block :last :up-arrow :type-tag :map :min-remaining :test :rest :arg1 :nl-t :buffer :start-pos :max-columns :start-block-t :exponentchar :end-block-t :data :commachar}, :order [:else :cur :line :max :base :parent :section :start-col :indent :done-nl :intra-block-nl :prefix :per-line-prefix :suffix :logical-block-callback :end-pos :start-pos :type-tag :data :trailing-white-space :buffer-blob :type :logical-block :nl-t :start-block-t :end-block-t :relative-to :offset :indent-t :hierarchy :default :start :end :block :current :mandatory :fill :linear :miser :buffer :logical-blocks :buffering :mode :pos :writing :miser-width :buffer-block :pretty-writer :sections :buffer-level :right-margin :circle :lines :suppress-namespaces :radix :level :readably :dispatch :length :pretty :added :ns :name :file :end-column :column :dynamic :end-line :arglists :doc :test :private :stream :line-relative :section-relative :seq :rest :func :def :params :colon :at :parameter-from-args :remaining-arg-count :minpad :mincol :colinc :padchar :commainterval :commachar :char-format :up-arrow :colon-up-arrow :base-args :w :d :k :overflowchar :e :exponentchar :n :selector :clauses :max-iterations :right-params :else-params :min-remaining :max-columns :colnum :string :directive :flags :bracket-info :generator-fn :both :count :right :allows-separator :last :separator :first :arg1 :arg2 :arg3 :right-bracket :not-delivered :queue :deref :symbol :list :map :vector :set]}, :doc nil}