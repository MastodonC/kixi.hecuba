;; Analyzed by ClojureScript 0.0-3297
{:use-macros nil, :excludes #{}, :name hiccups.runtime, :imports nil, :requires {cstring clojure.string, clojure.string clojure.string}, :uses nil, :defs {xml-attribute {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/hiccups/runtime.cljs", :line 41, :column 7, :end-line 41, :end-column 20, :arglists (quote ([name value]))}, :name hiccups.runtime/xml-attribute, :variadic false, :file "resources/public/js/compiled/out/hiccups/runtime.cljs", :end-column 20, :method-params ([name value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 2, :fn-var true, :arglists (quote ([name value]))}, re-tag {:name hiccups.runtime/re-tag, :file "resources/public/js/compiled/out/hiccups/runtime.cljs", :line 4, :column 1, :end-line 5, :end-column 9, :doc "Regular expression that parses a CSS-style id and class from a tag name.", :private true, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/hiccups/runtime.cljs", :line 5, :column 3, :end-line 5, :end-column 9, :doc "Regular expression that parses a CSS-style id and class from a tag name.", :private true}}, render-attribute {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/hiccups/runtime.cljs", :line 44, :column 7, :end-line 44, :end-column 23, :arglists (quote ([[name value]]))}, :name hiccups.runtime/render-attribute, :variadic false, :file "resources/public/js/compiled/out/hiccups/runtime.cljs", :end-column 23, :method-params ([p__36393]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 44, :end-line 44, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[name value]]))}, normalize-element {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/hiccups/runtime.cljs", :line 59, :column 7, :end-line 59, :end-column 24, :arglists (quote ([[tag & content]])), :doc "Ensure a tag vector is of the form [tag-name attrs content]."}, :name hiccups.runtime/normalize-element, :variadic false, :file "resources/public/js/compiled/out/hiccups/runtime.cljs", :end-column 24, :method-params ([p__36396]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[tag & content]])), :doc "Ensure a tag vector is of the form [tag-name attrs content]."}, container-tags {:name hiccups.runtime/container-tags, :file "resources/public/js/compiled/out/hiccups/runtime.cljs", :line 10, :column 1, :end-line 11, :end-column 17, :doc "A list of tags that need an explicit ending tag when rendered.", :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/hiccups/runtime.cljs", :line 11, :column 3, :end-line 11, :end-column 17, :doc "A list of tags that need an explicit ending tag when rendered."}}, render-attr-map {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/hiccups/runtime.cljs", :line 55, :column 7, :end-line 55, :end-column 22, :arglists (quote ([attrs]))}, :name hiccups.runtime/render-attr-map, :variadic false, :file "resources/public/js/compiled/out/hiccups/runtime.cljs", :end-column 22, :method-params ([attrs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 55, :end-line 55, :max-fixed-arity 1, :fn-var true, :arglists (quote ([attrs]))}, as-str {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/hiccups/runtime.cljs", :line 16, :column 7, :end-line 16, :end-column 13, :arglists (quote ([x]))}, :name hiccups.runtime/as-str, :variadic false, :file "resources/public/js/compiled/out/hiccups/runtime.cljs", :end-column 13, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, render-element {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/hiccups/runtime.cljs", :line 74, :column 7, :end-line 74, :end-column 21, :arglists (quote ([element])), :doc "Render a tag vector as a HTML element."}, :name hiccups.runtime/render-element, :variadic false, :file "resources/public/js/compiled/out/hiccups/runtime.cljs", :end-column 21, :method-params ([element]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 74, :end-line 74, :max-fixed-arity 1, :fn-var true, :arglists (quote ([element])), :doc "Render a tag vector as a HTML element."}, end-tag {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/hiccups/runtime.cljs", :line 38, :column 7, :end-line 38, :end-column 14, :arglists (quote ([]))}, :name hiccups.runtime/end-tag, :variadic false, :file "resources/public/js/compiled/out/hiccups/runtime.cljs", :end-column 14, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, in-mode {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/hiccups/runtime.cljs", :line 26, :column 7, :end-line 26, :end-column 14, :arglists (quote ([mode f]))}, :name hiccups.runtime/in-mode, :variadic false, :file "resources/public/js/compiled/out/hiccups/runtime.cljs", :end-column 14, :method-params ([mode f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 2, :fn-var true, :arglists (quote ([mode f]))}, render-html {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/hiccups/runtime.cljs", :line 84, :column 7, :end-line 84, :end-column 18, :arglists (quote ([x])), :doc "Turn a Clojure data type into a string of HTML."}, :name hiccups.runtime/render-html, :variadic false, :file "resources/public/js/compiled/out/hiccups/runtime.cljs", :end-column 18, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 84, :end-line 84, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Turn a Clojure data type into a string of HTML."}, *html-mode* {:name hiccups.runtime/*html-mode*, :file "resources/public/js/compiled/out/hiccups/runtime.cljs", :line 21, :column 1, :end-line 21, :end-column 27, :dynamic true, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/hiccups/runtime.cljs", :line 21, :column 16, :end-line 21, :end-column 27, :dynamic true}}, character-escapes {:name hiccups.runtime/character-escapes, :file "resources/public/js/compiled/out/hiccups/runtime.cljs", :line 7, :column 1, :end-line 8, :end-column 20, :doc "Characters to replace when escaping HTML", :private true, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/hiccups/runtime.cljs", :line 8, :column 3, :end-line 8, :end-column 20, :doc "Characters to replace when escaping HTML", :private true}}, h {:name hiccups.runtime/h, :file "resources/public/js/compiled/out/hiccups/runtime.cljs", :line 36, :column 1, :end-line 36, :end-column 7, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/hiccups/runtime.cljs", :line 36, :column 6, :end-line 36, :end-column 7}}, escape-html {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/hiccups/runtime.cljs", :line 30, :column 7, :end-line 30, :end-column 18, :arglists (quote ([text])), :doc "Change special characters into HTML character entities."}, :name hiccups.runtime/escape-html, :variadic false, :file "resources/public/js/compiled/out/hiccups/runtime.cljs", :end-column 18, :method-params ([text]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 1, :fn-var true, :arglists (quote ([text])), :doc "Change special characters into HTML character entities."}, xml-mode? {:protocol-inline nil, :meta {:file "/Users/jasonbell/work/git/geom-om/resources/public/js/compiled/out/hiccups/runtime.cljs", :line 23, :column 8, :end-line 23, :end-column 17, :private true, :arglists (quote ([]))}, :private true, :name hiccups.runtime/xml-mode?, :variadic false, :file "resources/public/js/compiled/out/hiccups/runtime.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:else :id :class :xml}, :order [:xml :else :id :class]}, :doc nil}