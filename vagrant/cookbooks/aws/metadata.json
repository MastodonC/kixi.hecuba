{
  "name": "aws",
  "version": "1.0.0",
  "description": "LWRPs for managing AWS resources",
  "long_description": "Description\n===========\n\nThis cookbook provides libraries, resources and providers to configure\nand manage Amazon Web Services components and offerings with the EC2\nAPI. Currently supported resources:\n\n* EBS Volumes (`ebs_volume`)\n* EBS Raid (`ebs_raid`)\n* Elastic IPs (`elastic_ip`)\n* Elastic Load Balancer (`elastic_lb`)\n* AWS Resource Tags (`resource_tag`)\n\nUnsupported AWS resources that have other cookbooks include but are\nnot limited to:\n\n* [Route53](http://community.opscode.com/cookbooks/route53)\n\n**Note** This cookbook uses the `right_aws` RubyGem to interact with\n  the AWS API because at the time it was written, `fog` and `aws-sdk`\n  were not available. Further, both of those gems require `nokogiri`\n  which requires compiling native extensions, which means build tools\n  are required. We do not plan at this time to change the underlying\n  Ruby library used in order to limit the external dependencies for\n  this cookbook.\n\nRequirements\n============\n\nRequires Chef 0.7.10 or higher for Lightweight Resource and Provider\nsupport. Chef 0.8+ is recommended. While this cookbook can be used in\n`chef-solo` mode, to gain the most flexibility, we recommend using\n`chef-client` with a Chef Server.\n\nAn Amazon Web Services account is required. The Access Key and Secret\nAccess Key are used to authenticate with EC2.\n\nAWS Credentials\n===============\n\nIn order to manage AWS components, authentication credentials need to\nbe available to the node. There are a number of ways to handle this,\nsuch as node attributes or roles. We recommend storing these in a\ndatabag (Chef 0.8+), and loading them in the recipe where the\nresources are needed.\n\nDataBag recommendation:\n\n    % knife data bag show aws main\n    {\n      \"id\": \"main\",\n      \"aws_access_key_id\": \"YOUR_ACCESS_KEY\",\n      \"aws_secret_access_key\": \"YOUR_SECRET_ACCESS_KEY\"\n    }\n\nThis can be loaded in a recipe with:\n\n    aws = data_bag_item(\"aws\", \"main\")\n\nAnd to access the values:\n\n    aws['aws_access_key_id']\n    aws['aws_secret_access_key']\n\nWe'll look at specific usage below.\n\nRecipes\n=======\n\ndefault.rb\n----------\n\nThe default recipe installs the `right_aws` RubyGem, which this\ncookbook requires in order to work with the EC2 API. Make sure that\nthe aws recipe is in the node or role `run_list` before any resources\nfrom this cookbook are used.\n\n    \"run_list\": [\n      \"recipe[aws]\"\n    ]\n\nThe `gem_package` is created as a Ruby Object and thus installed\nduring the Compile Phase of the Chef run.\n\nLibraries\n=========\n\nThe cookbook has a library module, `Opscode::AWS::Ec2`, which can be\nincluded where necessary:\n\n    include Opscode::Aws::Ec2\n\nThis is needed in any providers in the cookbook. Along with some\nhelper methods used in the providers, it sets up a class variable,\n`ec2` that is used along with the access and secret access keys\n\nResources and Providers\n=======================\n\nThis cookbook provides two resources and corresponding providers.\n\n## ebs_volume.rb\n\n\nManage Elastic Block Store (EBS) volumes with this resource.\n\nActions:\n\n* `create` - create a new volume.\n* `attach` - attach the specified volume.\n* `detach` - detach the specified volume.\n* `snapshot` - create a snapshot of the volume.\n* `prune` - prune snapshots.\n\nAttribute Parameters:\n\n* `aws_secret_access_key`, `aws_access_key` - passed to\n  `Opscode::AWS:Ec2` to authenticate, required.\n* `size` - size of the volume in gigabytes.\n* `snapshot_id` - snapshot to build EBS volume from.\n* most_recent_snapshot - use the most recent snapshot when creating a\n   volume from an existing volume (defaults to false)\n* `availability_zone` - EC2 region, and is normally automatically\n  detected.\n* `device` - local block device to attach the volume to, e.g.\n  `/dev/sdi` but no default value, required.\n* `volume_id` - specify an ID to attach, cannot be used with action\n  `:create` because AWS assigns new volume IDs\n* `timeout` - connection timeout for EC2 API.\n* `snapshots_to_keep` - used with action `:prune` for number of\n  snapshots to maintain.\n* `description` - used to set the description of an EBS snapshot\n* `volume_type` - \"standard\" or \"io1\" (io1 is the type for IOPS volume)\n* `piops` - number of Provisioned IOPS to provision, must be > 100\n\n## ebs_raid.rb\n\nManage Elastic Block Store (EBS) raid devices with this resource.\n\nAttribute Parameters:\n\n* `aws_secret_access_key`, `aws_access_key` - passed to\n  `Opscode::AWS:Ec2` to authenticate, required.\n* `mount_point` - where to mount the RAID volume\n* `mount_point_owner` - the owner of the mount point (default root)\n* `mount_point_group` - the group of the mount point (default root)\n* `mount_point_mode` - the file mode of the mount point (default 0755)\n* `disk_count` - number of EBS volumes to raid\n* `disk_size` - size of EBS volumes to raid\n* `level` - RAID level (default 10)\n* `filesystem` - filesystem to format raid array (default ext4)\n* `snapshots` - array of EBS snapshots to restore. Snapshots must be\n  taken using an ec2 consistent snapshot tool, and tagged with a\n  number that indicates how many devices are in the array being backed\n  up (e.g. \"Logs Backup [0-4]\" for a four-volume raid array snapshot)\n* `disk_type` - \"standard\" or \"io1\" (io1 is the type for IOPS volume)\n* `disk_piops` - number of Provisioned IOPS to provision per disk,\n  must be > 100\n\n## elastic_ip.rb\n\nActions:\n\n* `associate` - associate the IP.\n* `disassociate` - disassociate the IP.\n\nAttribute Parameters:\n\n* `aws_secret_access_key`, `aws_access_key` - passed to\n  `Opscode::AWS:Ec2` to authenticate, required.\n* `ip` - the IP address.\n* `timeout` - connection timeout for EC2 API.\n\n## elastic_lb.rb\n\nActions:\n\n* `register` - Add this instance to the LB\n* `deregister` - Remove this instance from the LB\n\nAttribute Parameters:\n\n* `aws_secret_access_key`, `aws_access_key` - passed to\n  `Opscode::AWS:Ec2` to authenticate, required.\n* `name` - the name of the LB, required.\n\n## resource_tag.rb\n\nActions:\n\n* `add` - Add tags to a resource.\n* `update` - Add or modify existing tags on a resource -- this is the\n  default action.\n* `remove` - Remove tags from a resource, but only if the specified\n  values match the existing ones.\n* `force_remove` - Remove tags from a resource, regardless of their\n  values.\n\nAttribute Parameters\n\n* `aws_secret_access_key`, `aws_access_key` - passed to\n  `Opscode::AWS:Ec2` to authenticate, required.\n* `tags` - a hash of key value pairs to be used as resource tags,\n  (e.g. `{ \"Name\" => \"foo\", \"Environment\" => node.chef_environment\n  }`,) required.\n* `resource_id` - resources whose tags will be modified. The value may\n  be a single ID as a string or multiple IDs in an array. If no\n  `resource_id` is specified the name attribute will be used.\n\nUsage\n=====\n\nThe following examples assume that the recommended data bag item has\nbeen created and that the following has been included at the top of\nthe recipe where they are used.\n\n    include_recipe \"aws\"\n    aws = data_bag_item(\"aws\", \"main\")\n\n## aws_ebs_volume\n\nThe resource only handles manipulating the EBS volume, additional\nresources need to be created in the recipe to manage the attached\nvolume as a filesystem or logical volume.\n\n    aws_ebs_volume \"db_ebs_volume\" do\n      aws_access_key aws['aws_access_key_id']\n      aws_secret_access_key aws['aws_secret_access_key']\n      size 50\n      device \"/dev/sdi\"\n      action [ :create, :attach ]\n    end\n\nThis will create a 50G volume, attach it to the instance as `/dev/sdi`.\n\n    aws_ebs_volume \"db_ebs_volume_from_snapshot\" do\n      aws_access_key aws['aws_access_key_id']\n      aws_secret_access_key aws['aws_secret_access_key']\n      size 50\n      device \"/dev/sdi\"\n      snapshot_id \"snap-ABCDEFGH\"\n      action [ :create, :attach ]\n    end\n\nThis will create a new 50G volume from the snapshot ID provided and\nattach it as `/dev/sdi`.\n\n## aws_elastic_ip\n\nThe `elastic_ip` resource provider does not support allocating new\nIPs. This must be done before running a recipe that uses the resource.\nAfter allocating a new Elastic IP, we recommend storing it in a\ndatabag and loading the item in the recipe.\n\nDatabag structure:\n\n    % knife data bag show aws eip_load_balancer_production\n    {\n      \"id\": \"eip_load_balancer_production\",\n      \"public_ip\": \"YOUR_ALLOCATED_IP\"\n    }\n\nThen to set up the Elastic IP on a system:\n\n    ip_info = data_bag_item(\"aws\", \"eip_load_balancer_production\")\n\n    aws_elastic_ip \"eip_load_balancer_production\" do\n      aws_access_key aws['aws_access_key_id']\n      aws_secret_access_key aws['aws_secret_access_key']\n      ip ip_info['public_ip']\n      action :associate\n    end\n\nThis will use the loaded `aws` and `ip_info` databags to pass the\nrequired values into the resource to configure. Note that when\nassociating an Elastic IP to an instance, connectivity to the instance\nwill be lost because the public IP address is changed. You will need\nto reconnect to the instance with the new IP.\n\nYou can also store this in a role as an attribute or assign to the\nnode directly, if preferred.\n\n## aws_elastic_lb\n\n`elastic_lb` opererates similar to `elastic_ip'. Make sure that you've\ncreated the ELB and enabled your instances' availability zones prior\nto using this provider.\n\nFor example, to register the node in the 'QA' ELB:\n\n    aws_elastic_lb \"elb_qa\" do\n      aws_access_key aws['aws_access_key_id']\n      aws_secret_access_key aws['aws_secret_access_key']\n      name \"QA\"\n      action :register\n    end\n\n## aws_resource_tag\n\n`resource_tag` can be used to manipulate the tags assigned to one or\nmore AWS resources, i.e. ec2 instances, ebs volumes or ebs volume\nsnapshots.\n\nAssigining tags to a node to reflect it's role and environment:\n\n    aws_resource_tag node['ec2']['instance_id'] do\n      aws_access_key aws['aws_access_key_id']\n      aws_secret_access_key aws['aws_secret_access_key']\n      tags({\"Name\" => \"www.example.com app server\",\n            \"Environment\" => node.chef_environment})\n      action :update\n    end\n\nAssigning a set of tags to multiple resources, e.g. ebs volumes in a\ndisk set:\n\n    aws_resource_tag 'my awesome raid set' do\n      aws_access_key aws['aws_access_key_id']\n      aws_secret_access_key aws['aws_secret_access_key']\n      resource_id [ \"vol-d0518cb2\", \"vol-fad31a9a\", \"vol-fb106a9f\", \"vol-74ed3b14\" ]\n      tags({\"Name\" => \"My awesome RAID disk set\",\n            \"Environment\" => node.chef_environment})\n    end\n\n## aws_s3_file\n\n`s3_file` can be used to download a file from s3 that requires aws authorization.  This\nis a wrapper around `remote_file` and supports the same resource attributes as `remote_file`.\n\n    aws_s3_file \"/tmp/foo\" do\n      bucket \"i_haz_an_s3_buckit\"\n      remote_path \"path/in/s3/bukket/to/foo\"\n      aws_access_key_id aws['aws_access_key_id']\n      aws_secret_access_key aws['aws_secret_access_key']\n    end\n\n\nLicense and Author\n==================\n\n* Author:: Chris Walters (<cw@opscode.com>)\n* Author:: AJ Christensen (<aj@opscode.com>)\n* Author:: Justin Huff (<jjhuff@mspin.net>)\n\nCopyright 2009-2013, Opscode, Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n",
  "maintainer": "Opscode, Inc.",
  "maintainer_email": "cookbooks@opscode.com",
  "license": "Apache 2.0",
  "platforms": {
  },
  "dependencies": {
  },
  "recommendations": {
  },
  "suggestions": {
  },
  "conflicting": {
  },
  "providing": {
  },
  "replacing": {
  },
  "attributes": {
  },
  "groupings": {
  },
  "recipes": {
    "aws": "Installs the right_aws gem during compile time"
  }
}